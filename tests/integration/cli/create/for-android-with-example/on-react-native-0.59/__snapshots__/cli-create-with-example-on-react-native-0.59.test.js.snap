// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CLI creates correct package artifacts on file system, with no options 1`] = `
Array [
  Object {
    "name": "react-native-integration-test-package-with-example/.gitattributes",
    "theContent": "",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/.gitignore",
    "theContent": "# OSX
#
.DS_Store

# node.js
#
node_modules/
npm-debug.log
yarn-error.log

# Android/IntelliJ
#
build/
.idea
.gradle
local.properties
*.iml

# BUCK
buck-out/
\\\\.buckd/
*.keystore
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/.npmignore",
    "theContent": "example
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/README.md",
    "theContent": "# react-native-integration-test-package-with-example

## Getting started

\`$ npm install react-native-integration-test-package-with-example --save\`

### Mostly automatic installation

\`$ react-native link react-native-integration-test-package-with-example\`

### Manual installation


#### Android

1. Open up \`android/app/src/main/java/[...]/MainApplication.java\`
  - Add \`import com.reactlibrary.IntegrationTestPackageWithExamplePackage;\` to the imports at the top of the file
  - Add \`new IntegrationTestPackageWithExamplePackage()\` to the list returned by the \`getPackages()\` method
2. Append the following lines to \`android/settings.gradle\`:
  	\`\`\`
  	include ':react-native-integration-test-package-with-example'
  	project(':react-native-integration-test-package-with-example').projectDir = new File(rootProject.projectDir, 	'../node_modules/react-native-integration-test-package-with-example/android')
  	\`\`\`
3. Insert the following lines inside the dependencies block in \`android/app/build.gradle\`:
  	\`\`\`
      compile project(':react-native-integration-test-package-with-example')
  	\`\`\`


## Usage
\`\`\`javascript
import IntegrationTestPackageWithExample from 'react-native-integration-test-package-with-example';

// TODO: What to do with the module?
IntegrationTestPackageWithExample;
\`\`\`
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/android/README.md",
    "theContent": "README
======

If you want to publish the lib as a maven dependency, follow these steps before publishing a new version to npm:

1. Be sure to have the Android [SDK](https://developer.android.com/studio/index.html) and [NDK](https://developer.android.com/ndk/guides/index.html) installed
2. Be sure to have a \`local.properties\` file in this folder that points to the Android SDK and NDK
\`\`\`
ndk.dir=/Users/{username}/Library/Android/sdk/ndk-bundle
sdk.dir=/Users/{username}/Library/Android/sdk
\`\`\`
3. Delete the \`maven\` folder
4. Run \`sudo ./gradlew installArchives\`
5. Verify that latest set of generated files is in the maven folder with the correct version number
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/android/build.gradle",
    "theContent": "buildscript {
    ext.safeExtGet = {prop, fallback ->
        rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
    }
    repositories {
        google()
        jcenter()
    }

    dependencies {
        // Matches recent template from React Native (0.60)
        // https://github.com/facebook/react-native/blob/0.60-stable/template/android/build.gradle#L16
        classpath(\\"com.android.tools.build:gradle:\${safeExtGet('gradlePluginVersion', '3.4.1')}\\")
    }
}

apply plugin: 'com.android.library'
apply plugin: 'maven'

// Matches values in recent template from React Native 0.59 / 0.60
// https://github.com/facebook/react-native/blob/0.59-stable/template/android/build.gradle#L5-L9
// https://github.com/facebook/react-native/blob/0.60-stable/template/android/build.gradle#L5-L9
def DEFAULT_COMPILE_SDK_VERSION = 28
def DEFAULT_BUILD_TOOLS_VERSION = \\"28.0.3\\"
def DEFAULT_MIN_SDK_VERSION = 16
def DEFAULT_TARGET_SDK_VERSION = 28

android {
  compileSdkVersion safeExtGet('compileSdkVersion', DEFAULT_COMPILE_SDK_VERSION)
  buildToolsVersion safeExtGet('buildToolsVersion', DEFAULT_BUILD_TOOLS_VERSION)

  defaultConfig {
    minSdkVersion safeExtGet('minSdkVersion', DEFAULT_MIN_SDK_VERSION)
    targetSdkVersion safeExtGet('targetSdkVersion', DEFAULT_TARGET_SDK_VERSION)
    versionCode 1
    versionName \\"1.0\\"
  }
  lintOptions {
    abortOnError false
  }
}

repositories {
    maven {
        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
        // Matches recent template from React Native 0.59 / 0.60
        // https://github.com/facebook/react-native/blob/0.59-stable/template/android/build.gradle#L30
        // https://github.com/facebook/react-native/blob/0.60-stable/template/android/build.gradle#L28
        url \\"$projectDir/../node_modules/react-native/android\\"
    }
    mavenCentral()
}

dependencies {
    implementation \\"com.facebook.react:react-native:\${safeExtGet('reactnativeVersion', '+')}\\"
}

def configureReactNativePom(def pom) {
    def packageJson = new groovy.json.JsonSlurper().parseText(file('../package.json').text)

    pom.project {
        name packageJson.title
        artifactId packageJson.name
        version = packageJson.version
        group = \\"com.reactlibrary\\"
        description packageJson.description
        url packageJson.repository.baseUrl

        licenses {
            license {
                name packageJson.license
                url packageJson.repository.baseUrl + '/blob/master/' + packageJson.licenseFilename
                distribution 'repo'
            }
        }

        developers {
            developer {
                id packageJson.author.username
                name packageJson.author.name
            }
        }
    }
}

afterEvaluate { project ->

    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += files(android.bootClasspath)
        classpath += files(project.getConfigurations().getByName('compile').asList())
        include '**/*.java'
    }

    task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
        classifier = 'javadoc'
        from androidJavadoc.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
        include '**/*.java'
    }

    android.libraryVariants.all { variant ->
        def name = variant.name.capitalize()
        task \\"jar\${name}\\"(type: Jar, dependsOn: variant.javaCompile) {
            from variant.javaCompile.destinationDir
        }
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocJar
    }

    task installArchives(type: Upload) {
        configuration = configurations.archives
        repositories.mavenDeployer {
            // Deploy to react-native-event-bridge/maven, ready to publish to npm
            repository url: \\"file://\${projectDir}/../android/maven\\"

            configureReactNativePom pom
        }
    }
}
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/android/src/main/AndroidManifest.xml",
    "theContent": "<manifest xmlns:android=\\"http://schemas.android.com/apk/res/android\\"
          package=\\"com.reactlibrary\\">

</manifest>
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/android/src/main/java/com/reactlibrary/IntegrationTestPackageWithExampleModule.java",
    "theContent": "package com.reactlibrary;

import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.Callback;

public class IntegrationTestPackageWithExampleModule extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;

    public IntegrationTestPackageWithExampleModule(ReactApplicationContext reactContext) {
        super(reactContext);
        this.reactContext = reactContext;
    }

    @Override
    public String getName() {
        return \\"IntegrationTestPackageWithExample\\";
    }

    @ReactMethod
    public void sampleMethod(String stringArgument, int numberArgument, Callback callback) {
        // TODO: Implement some actually useful functionality
        callback.invoke(\\"Received numberArgument: \\" + numberArgument + \\" stringArgument: \\" + stringArgument);
    }
}
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/android/src/main/java/com/reactlibrary/IntegrationTestPackageWithExamplePackage.java",
    "theContent": "package com.reactlibrary;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import com.facebook.react.ReactPackage;
import com.facebook.react.bridge.NativeModule;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.uimanager.ViewManager;
import com.facebook.react.bridge.JavaScriptModule;

public class IntegrationTestPackageWithExamplePackage implements ReactPackage {
    @Override
    public List<NativeModule> createNativeModules(ReactApplicationContext reactContext) {
        return Arrays.<NativeModule>asList(new IntegrationTestPackageWithExampleModule(reactContext));
    }

    @Override
    public List<ViewManager> createViewManagers(ReactApplicationContext reactContext) {
        return Collections.emptyList();
    }
}
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/.buckconfig",
    "theContent": "
[android]
  target = Google Inc.:Google APIs:23

[maven_repositories]
  central = https://repo1.maven.org/maven2
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/.flowconfig",
    "theContent": "[ignore]
; We fork some components by platform
.*/*[.]android.js

; Ignore \\"BUCK\\" generated dirs
<PROJECT_ROOT>/\\\\.buckd/

; Ignore unexpected extra \\"@providesModule\\"
.*/node_modules/.*/node_modules/fbjs/.*

; Ignore duplicate module providers
; For RN Apps installed via npm, \\"Libraries\\" folder is inside
; \\"node_modules/react-native\\" but in the source repo it is in the root
.*/Libraries/react-native/React.js

; Ignore polyfills
.*/Libraries/polyfills/.*

; Ignore metro
.*/node_modules/metro/.*

[include]

[libs]
node_modules/react-native/Libraries/react-native/react-native-interface.js
node_modules/react-native/flow/

[options]
emoji=true

esproposal.optional_chaining=enable
esproposal.nullish_coalescing=enable

module.system=haste
module.system.haste.use_name_reducers=true
# get basename
module.system.haste.name_reducers='^.*/\\\\([a-zA-Z0-9$_.-]+\\\\.js\\\\(\\\\.flow\\\\)?\\\\)$' -> '\\\\1'
# strip .js or .js.flow suffix
module.system.haste.name_reducers='^\\\\(.*\\\\)\\\\.js\\\\(\\\\.flow\\\\)?$' -> '\\\\1'
# strip .ios suffix
module.system.haste.name_reducers='^\\\\(.*\\\\)\\\\.ios$' -> '\\\\1'
module.system.haste.name_reducers='^\\\\(.*\\\\)\\\\.android$' -> '\\\\1'
module.system.haste.name_reducers='^\\\\(.*\\\\)\\\\.native$' -> '\\\\1'
module.system.haste.paths.blacklist=.*/__tests__/.*
module.system.haste.paths.blacklist=.*/__mocks__/.*
module.system.haste.paths.blacklist=<PROJECT_ROOT>/node_modules/react-native/Libraries/Animated/src/polyfills/.*
module.system.haste.paths.whitelist=<PROJECT_ROOT>/node_modules/react-native/Libraries/.*

munge_underscores=true

module.name_mapper='^[./a-zA-Z0-9$_-]+\\\\.\\\\(bmp\\\\|gif\\\\|jpg\\\\|jpeg\\\\|png\\\\|psd\\\\|svg\\\\|webp\\\\|m4v\\\\|mov\\\\|mp4\\\\|mpeg\\\\|mpg\\\\|webm\\\\|aac\\\\|aiff\\\\|caf\\\\|m4a\\\\|mp3\\\\|wav\\\\|html\\\\|pdf\\\\)$' -> 'RelativeImageStub'

module.file_ext=.js
module.file_ext=.jsx
module.file_ext=.json
module.file_ext=.native.js

suppress_type=$FlowIssue
suppress_type=$FlowFixMe
suppress_type=$FlowFixMeProps
suppress_type=$FlowFixMeState

suppress_comment=\\\\\\\\(.\\\\\\\\|\\\\n\\\\\\\\)*\\\\\\\\$FlowFixMe\\\\\\\\($\\\\\\\\|[^(]\\\\\\\\|(\\\\\\\\(<VERSION>\\\\\\\\)? *\\\\\\\\(site=[a-z,_]*react_native[a-z,_]*\\\\\\\\)?)\\\\\\\\)
suppress_comment=\\\\\\\\(.\\\\\\\\|\\\\n\\\\\\\\)*\\\\\\\\$FlowIssue\\\\\\\\((\\\\\\\\(<VERSION>\\\\\\\\)? *\\\\\\\\(site=[a-z,_]*react_native[a-z,_]*\\\\\\\\)?)\\\\\\\\)?:? #[0-9]+
suppress_comment=\\\\\\\\(.\\\\\\\\|\\\\n\\\\\\\\)*\\\\\\\\$FlowFixedInNextDeploy
suppress_comment=\\\\\\\\(.\\\\\\\\|\\\\n\\\\\\\\)*\\\\\\\\$FlowExpectedError

[version]
^0.92.0
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/.gitattributes",
    "theContent": "*.pbxproj -text
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/.gitignore",
    "theContent": "# OSX
#
.DS_Store

# Xcode
#
build/
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata
*.xccheckout
*.moved-aside
DerivedData
*.hmap
*.ipa
*.xcuserstate
project.xcworkspace

# Android/IntelliJ
#
build/
.idea
.gradle
local.properties
*.iml

# node.js
#
node_modules/
npm-debug.log
yarn-error.log

# BUCK
buck-out/
\\\\.buckd/
*.keystore

# fastlane
#
# It is recommended to not store the screenshots in the git repo. Instead, use fastlane to re-generate the
# screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/

*/fastlane/report.xml
*/fastlane/Preview.html
*/fastlane/screenshots

# Bundle artifact
*.jsbundle
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/.watchmanconfig",
    "theContent": "{}",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/App.js",
    "theContent": "/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, { Component } from 'react';
import { Platform, StyleSheet, Text, View } from 'react-native';
import IntegrationTestPackageWithExample from 'react-native-integration-test-package-with-example';

export default class App extends Component<{}> {
  state = {
    status: 'starting',
    message: '--'
  };
  componentDidMount() {
    IntegrationTestPackageWithExample.sampleMethod('Testing', 123, (message) => {
      this.setState({
        status: 'native callback received',
        message
      });
    });
  }
  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.welcome}>☆IntegrationTestPackageWithExample example☆</Text>
        <Text style={styles.instructions}>STATUS: {this.state.status}</Text>
        <Text style={styles.welcome}>☆NATIVE CALLBACK MESSAGE☆</Text>
        <Text style={styles.instructions}>{this.state.message}</Text>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/__tests__/App-test.js",
    "theContent": "/**
 * @format
 */

import 'react-native';
import React from 'react';
import App from '../App';

// Note: test renderer must be required after react-native.
import renderer from 'react-test-renderer';

it('renders correctly', () => {
  renderer.create(<App />);
});
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/android/app/BUCK",
    "theContent": "# To learn about Buck see [Docs](https://buckbuild.com/).
# To run your application with Buck:
# - install Buck
# - \`npm start\` - to start the packager
# - \`cd android\`
# - \`keytool -genkey -v -keystore keystores/debug.keystore -storepass android -alias androiddebugkey -keypass android -dname \\"CN=Android Debug,O=Android,C=US\\"\`
# - \`./gradlew :app:copyDownloadableDepsToLibs\` - make all Gradle compile dependencies available to Buck
# - \`buck install -r android/app\` - compile, install and run application
#

load(\\":build_defs.bzl\\", \\"create_aar_targets\\", \\"create_jar_targets\\")

lib_deps = []

create_aar_targets(glob([\\"libs/*.aar\\"]))

create_jar_targets(glob([\\"libs/*.jar\\"]))

android_library(
    name = \\"all-libs\\",
    exported_deps = lib_deps,
)

android_library(
    name = \\"app-code\\",
    srcs = glob([
        \\"src/main/java/**/*.java\\",
    ]),
    deps = [
        \\":all-libs\\",
        \\":build_config\\",
        \\":res\\",
    ],
)

android_build_config(
    name = \\"build_config\\",
    package = \\"com.example\\",
)

android_resource(
    name = \\"res\\",
    package = \\"com.example\\",
    res = \\"src/main/res\\",
)

android_binary(
    name = \\"app\\",
    keystore = \\"//android/keystores:debug\\",
    manifest = \\"src/main/AndroidManifest.xml\\",
    package_type = \\"debug\\",
    deps = [
        \\":app-code\\",
    ],
)
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/android/app/build.gradle",
    "theContent": "apply plugin: \\"com.android.application\\"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call \`react-native bundle\` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * \`apply from: \\"../../node_modules/react-native/react.gradle\\"\` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: \\"index.android.bundle\\",
 *
 *   // the entry file for bundle generation
 *   entryFile: \\"index.android.js\\",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn\${productFlavor}\${buildType}'
 *   //         'bundleIn\${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn\${productFlavor}\${buildType}'
 *   //         'devDisabledIn\${buildType}'
 *
 *   // the root of your project, i.e. where \\"package.json\\" lives
 *   root: \\"../../\\",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: \\"$buildDir/intermediates/assets/debug\\",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: \\"$buildDir/intermediates/assets/release\\",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: \\"$buildDir/intermediates/res/merged/debug\\",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: \\"$buildDir/intermediates/res/merged/release\\",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: [\\"android/**\\", \\"ios/**\\"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: [\\"node\\"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: \\"index.js\\"
]

apply from: \\"../../node_modules/react-native/react.gradle\\"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId \\"com.example\\"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName \\"1.0\\"
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include \\"armeabi-v7a\\", \\"x86\\", \\"arm64-v8a\\", \\"x86_64\\"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile(\\"proguard-android.txt\\"), \\"proguard-rules.pro\\"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = [\\"armeabi-v7a\\":1, \\"x86\\":2, \\"arm64-v8a\\": 3, \\"x86_64\\": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation project(':react-native-integration-test-package-with-example')
    implementation fileTree(dir: \\"libs\\", include: [\\"*.jar\\"])
    implementation \\"com.android.support:appcompat-v7:\${rootProject.ext.supportLibVersion}\\"
    implementation \\"com.facebook.react:react-native:+\\"  // From node_modules
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/android/app/build_defs.bzl",
    "theContent": "\\"\\"\\"Helper definitions to glob .aar and .jar targets\\"\\"\\"

def create_aar_targets(aarfiles):
    for aarfile in aarfiles:
        name = \\"aars__\\" + aarfile[aarfile.rindex(\\"/\\") + 1:aarfile.rindex(\\".aar\\")]
        lib_deps.append(\\":\\" + name)
        android_prebuilt_aar(
            name = name,
            aar = aarfile,
        )

def create_jar_targets(jarfiles):
    for jarfile in jarfiles:
        name = \\"jars__\\" + jarfile[jarfile.rindex(\\"/\\") + 1:jarfile.rindex(\\".jar\\")]
        lib_deps.append(\\":\\" + name)
        prebuilt_jar(
            name = name,
            binary_jar = jarfile,
        )
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/android/app/proguard-rules.pro",
    "theContent": "# Add project specific ProGuard rules here.
# By default, the flags in this file are appended to flags specified
# in /usr/local/Cellar/android-sdk/24.3.3/tools/proguard/proguard-android.txt
# You can edit the include path and order by changing the proguardFiles
# directive in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# Add any project specific keep options here:

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/android/app/src/debug/AndroidManifest.xml",
    "theContent": "<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<manifest xmlns:android=\\"http://schemas.android.com/apk/res/android\\"
    xmlns:tools=\\"http://schemas.android.com/tools\\">

    <uses-permission android:name=\\"android.permission.SYSTEM_ALERT_WINDOW\\"/>

    <application android:usesCleartextTraffic=\\"true\\" tools:targetApi=\\"28\\" tools:ignore=\\"GoogleAppIndexingWarning\\" />
</manifest>
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/android/app/src/main/AndroidManifest.xml",
    "theContent": "<manifest xmlns:android=\\"http://schemas.android.com/apk/res/android\\"
  package=\\"com.example\\">

    <uses-permission android:name=\\"android.permission.INTERNET\\" />

    <application
      android:name=\\".MainApplication\\"
      android:label=\\"@string/app_name\\"
      android:icon=\\"@mipmap/ic_launcher\\"
      android:roundIcon=\\"@mipmap/ic_launcher_round\\"
      android:allowBackup=\\"false\\"
      android:theme=\\"@style/AppTheme\\">
      <activity
        android:name=\\".MainActivity\\"
        android:label=\\"@string/app_name\\"
        android:configChanges=\\"keyboard|keyboardHidden|orientation|screenSize\\"
        android:windowSoftInputMode=\\"adjustResize\\">
        <intent-filter>
            <action android:name=\\"android.intent.action.MAIN\\" />
            <category android:name=\\"android.intent.category.LAUNCHER\\" />
        </intent-filter>
      </activity>
      <activity android:name=\\"com.facebook.react.devsupport.DevSettingsActivity\\" />
    </application>

</manifest>
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/android/app/src/main/java/com/example/MainActivity.java",
    "theContent": "package com.example;

import com.facebook.react.ReactActivity;

public class MainActivity extends ReactActivity {

    /**
     * Returns the name of the main component registered from JavaScript.
     * This is used to schedule rendering of the component.
     */
    @Override
    protected String getMainComponentName() {
        return \\"example\\";
    }
}
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/android/app/src/main/java/com/example/MainApplication.java",
    "theContent": "package com.example;

import android.app.Application;

import com.facebook.react.ReactApplication;
import com.reactlibrary.IntegrationTestPackageWithExamplePackage;
import com.facebook.react.ReactNativeHost;
import com.facebook.react.ReactPackage;
import com.facebook.react.shell.MainReactPackage;
import com.facebook.soloader.SoLoader;

import java.util.Arrays;
import java.util.List;

public class MainApplication extends Application implements ReactApplication {

  private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {
    @Override
    public boolean getUseDeveloperSupport() {
      return BuildConfig.DEBUG;
    }

    @Override
    protected List<ReactPackage> getPackages() {
      return Arrays.<ReactPackage>asList(
          new MainReactPackage(),
            new IntegrationTestPackageWithExamplePackage()
      );
    }

    @Override
    protected String getJSMainModuleName() {
      return \\"index\\";
    }
  };

  @Override
  public ReactNativeHost getReactNativeHost() {
    return mReactNativeHost;
  }

  @Override
  public void onCreate() {
    super.onCreate();
    SoLoader.init(this, /* native exopackage */ false);
  }
}
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/android/build.gradle",
    "theContent": "// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        buildToolsVersion = \\"28.0.3\\"
        minSdkVersion = 16
        compileSdkVersion = 28
        targetSdkVersion = 28
        supportLibVersion = \\"28.0.0\\"
    }
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath(\\"com.android.tools.build:gradle:3.4.0\\")

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        mavenLocal()
        google()
        jcenter()
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url \\"$rootDir/../node_modules/react-native/android\\"
        }
    }
}
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/android/gradle.properties",
    "theContent": "# Project-wide Gradle settings.

# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.

# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html

# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
# Default value: -Xmx10248m -XX:MaxPermSize=256m
# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
# org.gradle.parallel=true
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/android/gradle/wrapper/gradle-wrapper.properties",
    "theContent": "distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\\\\://services.gradle.org/distributions/gradle-5.4.1-all.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/android/gradlew",
    "theContent": "#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the \\"License\\");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an \\"AS IS\\" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG=\\"$0\\"
# Need this for relative symlinks.
while [ -h \\"$PRG\\" ] ; do
    ls=\`ls -ld \\"$PRG\\"\`
    link=\`expr \\"$ls\\" : '.*-> \\\\(.*\\\\)$'\`
    if expr \\"$link\\" : '/.*' > /dev/null; then
        PRG=\\"$link\\"
    else
        PRG=\`dirname \\"$PRG\\"\`\\"/$link\\"
    fi
done
SAVED=\\"\`pwd\`\\"
cd \\"\`dirname \\\\\\"$PRG\\\\\\"\`/\\" >/dev/null
APP_HOME=\\"\`pwd -P\`\\"
cd \\"$SAVED\\" >/dev/null

APP_NAME=\\"Gradle\\"
APP_BASE_NAME=\`basename \\"$0\\"\`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='\\"-Xmx64m\\" \\"-Xms64m\\"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=\\"maximum\\"

warn () {
    echo \\"$*\\"
}

die () {
    echo
    echo \\"$*\\"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case \\"\`uname\`\\" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

# Determine the Java command to use to start the JVM.
if [ -n \\"$JAVA_HOME\\" ] ; then
    if [ -x \\"$JAVA_HOME/jre/sh/java\\" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=\\"$JAVA_HOME/jre/sh/java\\"
    else
        JAVACMD=\\"$JAVA_HOME/bin/java\\"
    fi
    if [ ! -x \\"$JAVACMD\\" ] ; then
        die \\"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation.\\"
    fi
else
    JAVACMD=\\"java\\"
    which java >/dev/null 2>&1 || die \\"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation.\\"
fi

# Increase the maximum file descriptors if we can.
if [ \\"$cygwin\\" = \\"false\\" -a \\"$darwin\\" = \\"false\\" -a \\"$nonstop\\" = \\"false\\" ] ; then
    MAX_FD_LIMIT=\`ulimit -H -n\`
    if [ $? -eq 0 ] ; then
        if [ \\"$MAX_FD\\" = \\"maximum\\" -o \\"$MAX_FD\\" = \\"max\\" ] ; then
            MAX_FD=\\"$MAX_FD_LIMIT\\"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn \\"Could not set maximum file descriptor limit: $MAX_FD\\"
        fi
    else
        warn \\"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\\"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS=\\"$GRADLE_OPTS \\\\\\"-Xdock:name=$APP_NAME\\\\\\" \\\\\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\\\\"\\"
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
    APP_HOME=\`cygpath --path --mixed \\"$APP_HOME\\"\`
    CLASSPATH=\`cygpath --path --mixed \\"$CLASSPATH\\"\`
    JAVACMD=\`cygpath --unix \\"$JAVACMD\\"\`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=\`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null\`
    SEP=\\"\\"
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS=\\"$ROOTDIRS$SEP$dir\\"
        SEP=\\"|\\"
    done
    OURCYGPATTERN=\\"(^($ROOTDIRS))\\"
    # Add a user-defined pattern to the cygpath arguments
    if [ \\"$GRADLE_CYGPATTERN\\" != \\"\\" ] ; then
        OURCYGPATTERN=\\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\\"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in \\"$@\\" ; do
        CHECK=\`echo \\"$arg\\"|egrep -c \\"$OURCYGPATTERN\\" -\`
        CHECK2=\`echo \\"$arg\\"|egrep -c \\"^-\\"\`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval \`echo args$i\`=\`cygpath --path --ignore --mixed \\"$arg\\"\`
        else
            eval \`echo args$i\`=\\"\\\\\\"$arg\\\\\\"\\"
        fi
        i=$((i+1))
    done
    case $i in
        (0) set -- ;;
        (1) set -- \\"$args0\\" ;;
        (2) set -- \\"$args0\\" \\"$args1\\" ;;
        (3) set -- \\"$args0\\" \\"$args1\\" \\"$args2\\" ;;
        (4) set -- \\"$args0\\" \\"$args1\\" \\"$args2\\" \\"$args3\\" ;;
        (5) set -- \\"$args0\\" \\"$args1\\" \\"$args2\\" \\"$args3\\" \\"$args4\\" ;;
        (6) set -- \\"$args0\\" \\"$args1\\" \\"$args2\\" \\"$args3\\" \\"$args4\\" \\"$args5\\" ;;
        (7) set -- \\"$args0\\" \\"$args1\\" \\"$args2\\" \\"$args3\\" \\"$args4\\" \\"$args5\\" \\"$args6\\" ;;
        (8) set -- \\"$args0\\" \\"$args1\\" \\"$args2\\" \\"$args3\\" \\"$args4\\" \\"$args5\\" \\"$args6\\" \\"$args7\\" ;;
        (9) set -- \\"$args0\\" \\"$args1\\" \\"$args2\\" \\"$args3\\" \\"$args4\\" \\"$args5\\" \\"$args6\\" \\"$args7\\" \\"$args8\\" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\\\\\\\n \\"$i\\" | sed \\"s/'/'\\\\\\\\\\\\\\\\''/g;1s/^/'/;\\\\$s/\\\\$/' \\\\\\\\\\\\\\\\/\\" ; done
    echo \\" \\"
}
APP_ARGS=$(save \\"$@\\")

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \\"\\\\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\\\\"\\" -classpath \\"\\\\\\"$CLASSPATH\\\\\\"\\" org.gradle.wrapper.GradleWrapperMain \\"$APP_ARGS\\"

# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
if [ \\"$(uname)\\" = \\"Darwin\\" ] && [ \\"$HOME\\" = \\"$PWD\\" ]; then
  cd \\"$(dirname \\"$0\\")\\"
fi

exec \\"$JAVACMD\\" \\"$@\\"
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/android/gradlew.bat",
    "theContent": "@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the \\"License\\");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      http://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an \\"AS IS\\" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if \\"%DEBUG%\\" == \\"\\" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if \\"%OS%\\"==\\"Windows_NT\\" setlocal

set DIRNAME=%~dp0
if \\"%DIRNAME%\\" == \\"\\" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS=\\"-Xmx64m\\" \\"-Xms64m\\"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if \\"%ERRORLEVEL%\\" == \\"0\\" goto init

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:\\"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist \\"%JAVA_EXE%\\" goto init

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:init
@rem Get command-line arguments, handling Windows variants

if not \\"%OS%\\" == \\"Windows_NT\\" goto win9xME_args

:win9xME_args
@rem Slurp the command line arguments.
set CMD_LINE_ARGS=
set _SKIP=2

:win9xME_args_slurp
if \\"x%~1\\" == \\"x\\" goto execute

set CMD_LINE_ARGS=%*

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\\\\gradle\\\\wrapper\\\\gradle-wrapper.jar

@rem Execute Gradle
\\"%JAVA_EXE%\\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \\"-Dorg.gradle.appname=%APP_BASE_NAME%\\" -classpath \\"%CLASSPATH%\\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%

:end
@rem End local scope for the variables with windows NT shell
if \\"%ERRORLEVEL%\\"==\\"0\\" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not \\"\\" == \\"%GRADLE_EXIT_CONSOLE%\\" exit 1
exit /b 1

:mainEnd
if \\"%OS%\\"==\\"Windows_NT\\" endlocal

:omega
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/android/keystores/BUCK",
    "theContent": "keystore(
    name = \\"debug\\",
    properties = \\"debug.keystore.properties\\",
    store = \\"debug.keystore\\",
    visibility = [
        \\"PUBLIC\\",
    ],
)
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/android/keystores/debug.keystore.properties",
    "theContent": "key.store=debug.keystore
key.alias=androiddebugkey
key.store.password=android
key.alias.password=android
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/android/settings.gradle",
    "theContent": "rootProject.name = 'example'
include ':react-native-integration-test-package-with-example'
project(':react-native-integration-test-package-with-example').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-integration-test-package-with-example/android')

include ':app'
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/app.json",
    "theContent": "{
  \\"name\\": \\"example\\",
  \\"displayName\\": \\"example\\"
}",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/babel.config.js",
    "theContent": "module.exports = {
  presets: ['module:metro-react-native-babel-preset'],
};
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/index.js",
    "theContent": "/**
 * @format
 */

import {AppRegistry} from 'react-native';
import App from './App';
import {name as appName} from './app.json';

AppRegistry.registerComponent(appName, () => App);
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/ios/example-tvOS/Info.plist",
    "theContent": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<!DOCTYPE plist PUBLIC \\"-//Apple//DTD PLIST 1.0//EN\\" \\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\">
<plist version=\\"1.0\\">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>en</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIdentifier</key>
	<string>org.reactjs.native.example.$(PRODUCT_NAME:rfc1034identifier)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>$(PRODUCT_NAME)</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>1.0</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleVersion</key>
	<string>1</string>
	<key>LSRequiresIPhoneOS</key>
	<true/>
	<key>UILaunchStoryboardName</key>
	<string>LaunchScreen</string>
	<key>UIRequiredDeviceCapabilities</key>
	<array>
		<string>armv7</string>
	</array>
	<key>UISupportedInterfaceOrientations</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>UIViewControllerBasedStatusBarAppearance</key>
	<false/>
	<key>NSLocationWhenInUseUsageDescription</key>
	<string></string>
	<key>NSAppTransportSecurity</key>
	<!--See http://ste.vn/2015/06/10/configuring-app-transport-security-ios-9-osx-10-11/ -->
	<dict>
		<key>NSExceptionDomains</key>
		<dict>
			<key>localhost</key>
			<dict>
				<key>NSExceptionAllowsInsecureHTTPLoads</key>
				<true/>
			</dict>
		</dict>
	</dict>
</dict>
</plist>
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/ios/example-tvOSTests/Info.plist",
    "theContent": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<!DOCTYPE plist PUBLIC \\"-//Apple//DTD PLIST 1.0//EN\\" \\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\">
<plist version=\\"1.0\\">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>en</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIdentifier</key>
	<string>org.reactjs.native.example.$(PRODUCT_NAME:rfc1034identifier)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>$(PRODUCT_NAME)</string>
	<key>CFBundlePackageType</key>
	<string>BNDL</string>
	<key>CFBundleShortVersionString</key>
	<string>1.0</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleVersion</key>
	<string>1</string>
</dict>
</plist>
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/ios/example.xcodeproj/project.pbxproj",
    "theContent": "// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 46;
	objects = {

/* Begin PBXBuildFile section */
		00C302E51ABCBA2D00DB3ED1 /* libRCTActionSheet.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 00C302AC1ABCB8CE00DB3ED1 /* libRCTActionSheet.a */; };
		00C302E71ABCBA2D00DB3ED1 /* libRCTGeolocation.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 00C302BA1ABCB90400DB3ED1 /* libRCTGeolocation.a */; };
		00C302E81ABCBA2D00DB3ED1 /* libRCTImage.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 00C302C01ABCB91800DB3ED1 /* libRCTImage.a */; };
		00C302E91ABCBA2D00DB3ED1 /* libRCTNetwork.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 00C302DC1ABCB9D200DB3ED1 /* libRCTNetwork.a */; };
		00C302EA1ABCBA2D00DB3ED1 /* libRCTVibration.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 00C302E41ABCB9EE00DB3ED1 /* libRCTVibration.a */; };
		00E356F31AD99517003FC87E /* exampleTests.m in Sources */ = {isa = PBXBuildFile; fileRef = 00E356F21AD99517003FC87E /* exampleTests.m */; };
		11D1A2F320CAFA9E000508D9 /* libRCTAnimation.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 5E9157331DD0AC6500FF2AA8 /* libRCTAnimation.a */; };
		133E29F31AD74F7200F7D852 /* libRCTLinking.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 78C398B91ACF4ADC00677621 /* libRCTLinking.a */; };
		139105C61AF99C1200B5F7CC /* libRCTSettings.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 139105C11AF99BAD00B5F7CC /* libRCTSettings.a */; };
		139FDEF61B0652A700C62182 /* libRCTWebSocket.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 139FDEF41B06529B00C62182 /* libRCTWebSocket.a */; };
		13B07FBC1A68108700A75B9A /* AppDelegate.m in Sources */ = {isa = PBXBuildFile; fileRef = 13B07FB01A68108700A75B9A /* AppDelegate.m */; };
		13B07FBD1A68108700A75B9A /* LaunchScreen.xib in Resources */ = {isa = PBXBuildFile; fileRef = 13B07FB11A68108700A75B9A /* LaunchScreen.xib */; };
		13B07FBF1A68108700A75B9A /* Images.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 13B07FB51A68108700A75B9A /* Images.xcassets */; };
		13B07FC11A68108700A75B9A /* main.m in Sources */ = {isa = PBXBuildFile; fileRef = 13B07FB71A68108700A75B9A /* main.m */; };
		140ED2AC1D01E1AD002B40FF /* libReact.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 146834041AC3E56700842450 /* libReact.a */; };
		146834051AC3E58100842450 /* libReact.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 146834041AC3E56700842450 /* libReact.a */; };
		2D02E4BC1E0B4A80006451C7 /* AppDelegate.m in Sources */ = {isa = PBXBuildFile; fileRef = 13B07FB01A68108700A75B9A /* AppDelegate.m */; };
		2D02E4BD1E0B4A84006451C7 /* Images.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 13B07FB51A68108700A75B9A /* Images.xcassets */; };
		2D02E4BF1E0B4AB3006451C7 /* main.m in Sources */ = {isa = PBXBuildFile; fileRef = 13B07FB71A68108700A75B9A /* main.m */; };
		2D02E4C21E0B4AEC006451C7 /* libRCTAnimation.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 5E9157351DD0AC6500FF2AA8 /* libRCTAnimation.a */; };
		2D02E4C31E0B4AEC006451C7 /* libRCTImage-tvOS.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 3DAD3E841DF850E9000B6D8A /* libRCTImage-tvOS.a */; };
		2D02E4C41E0B4AEC006451C7 /* libRCTLinking-tvOS.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 3DAD3E881DF850E9000B6D8A /* libRCTLinking-tvOS.a */; };
		2D02E4C51E0B4AEC006451C7 /* libRCTNetwork-tvOS.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 3DAD3E8C1DF850E9000B6D8A /* libRCTNetwork-tvOS.a */; };
		2D02E4C61E0B4AEC006451C7 /* libRCTSettings-tvOS.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 3DAD3E901DF850E9000B6D8A /* libRCTSettings-tvOS.a */; };
		2D02E4C71E0B4AEC006451C7 /* libRCTText-tvOS.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 3DAD3E941DF850E9000B6D8A /* libRCTText-tvOS.a */; };
		2D02E4C81E0B4AEC006451C7 /* libRCTWebSocket-tvOS.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 3DAD3E991DF850E9000B6D8A /* libRCTWebSocket-tvOS.a */; };
		2D16E6881FA4F8E400B85C8A /* libReact.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 2D16E6891FA4F8E400B85C8A /* libReact.a */; };
		2DCD954D1E0B4F2C00145EB5 /* exampleTests.m in Sources */ = {isa = PBXBuildFile; fileRef = 00E356F21AD99517003FC87E /* exampleTests.m */; };
		2DF0FFEE2056DD460020B375 /* libReact.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 3DAD3EA31DF850E9000B6D8A /* libReact.a */; };
		832341BD1AAA6AB300B99B32 /* libRCTText.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 832341B51AAA6A8300B99B32 /* libRCTText.a */; };
		ADBDB9381DFEBF1600ED6528 /* libRCTBlob.a in Frameworks */ = {isa = PBXBuildFile; fileRef = ADBDB9271DFEBF0700ED6528 /* libRCTBlob.a */; };
		ED297163215061F000B7C4FE /* JavaScriptCore.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = ED297162215061F000B7C4FE /* JavaScriptCore.framework */; };
		ED2971652150620600B7C4FE /* JavaScriptCore.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = ED2971642150620600B7C4FE /* JavaScriptCore.framework */; };
/* End PBXBuildFile section */

/* Begin PBXContainerItemProxy section */
		00C302AB1ABCB8CE00DB3ED1 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 00C302A71ABCB8CE00DB3ED1 /* RCTActionSheet.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 134814201AA4EA6300B7C361;
			remoteInfo = RCTActionSheet;
		};
		00C302B91ABCB90400DB3ED1 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 00C302B51ABCB90400DB3ED1 /* RCTGeolocation.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 134814201AA4EA6300B7C361;
			remoteInfo = RCTGeolocation;
		};
		00C302BF1ABCB91800DB3ED1 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 00C302BB1ABCB91800DB3ED1 /* RCTImage.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 58B5115D1A9E6B3D00147676;
			remoteInfo = RCTImage;
		};
		00C302DB1ABCB9D200DB3ED1 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 00C302D31ABCB9D200DB3ED1 /* RCTNetwork.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 58B511DB1A9E6C8500147676;
			remoteInfo = RCTNetwork;
		};
		00C302E31ABCB9EE00DB3ED1 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 00C302DF1ABCB9EE00DB3ED1 /* RCTVibration.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 832C81801AAF6DEF007FA2F7;
			remoteInfo = RCTVibration;
		};
		00E356F41AD99517003FC87E /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 83CBB9F71A601CBA00E9B192 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 13B07F861A680F5B00A75B9A;
			remoteInfo = example;
		};
		139105C01AF99BAD00B5F7CC /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 139105B61AF99BAD00B5F7CC /* RCTSettings.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 134814201AA4EA6300B7C361;
			remoteInfo = RCTSettings;
		};
		139FDEF31B06529B00C62182 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 139FDEE61B06529A00C62182 /* RCTWebSocket.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 3C86DF461ADF2C930047B81A;
			remoteInfo = RCTWebSocket;
		};
		146834031AC3E56700842450 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 146833FF1AC3E56700842450 /* React.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 83CBBA2E1A601D0E00E9B192;
			remoteInfo = React;
		};
		2D02E4911E0B4A5D006451C7 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 83CBB9F71A601CBA00E9B192 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 2D02E47A1E0B4A5D006451C7;
			remoteInfo = \\"example-tvOS\\";
		};
		2D16E6711FA4F8DC00B85C8A /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = ADBDB91F1DFEBF0600ED6528 /* RCTBlob.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = ADD01A681E09402E00F6D226;
			remoteInfo = \\"RCTBlob-tvOS\\";
		};
		2D16E6831FA4F8DC00B85C8A /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 139FDEE61B06529A00C62182 /* RCTWebSocket.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 3DBE0D001F3B181A0099AA32;
			remoteInfo = fishhook;
		};
		2D16E6851FA4F8DC00B85C8A /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 139FDEE61B06529A00C62182 /* RCTWebSocket.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 3DBE0D0D1F3B181C0099AA32;
			remoteInfo = \\"fishhook-tvOS\\";
		};
		2DF0FFDE2056DD460020B375 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 146833FF1AC3E56700842450 /* React.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = EBF21BDC1FC498900052F4D5;
			remoteInfo = jsinspector;
		};
		2DF0FFE02056DD460020B375 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 146833FF1AC3E56700842450 /* React.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = EBF21BFA1FC4989A0052F4D5;
			remoteInfo = \\"jsinspector-tvOS\\";
		};
		2DF0FFE22056DD460020B375 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 146833FF1AC3E56700842450 /* React.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 139D7ECE1E25DB7D00323FB7;
			remoteInfo = \\"third-party\\";
		};
		2DF0FFE42056DD460020B375 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 146833FF1AC3E56700842450 /* React.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 3D383D3C1EBD27B6005632C8;
			remoteInfo = \\"third-party-tvOS\\";
		};
		2DF0FFE62056DD460020B375 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 146833FF1AC3E56700842450 /* React.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 139D7E881E25C6D100323FB7;
			remoteInfo = \\"double-conversion\\";
		};
		2DF0FFE82056DD460020B375 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 146833FF1AC3E56700842450 /* React.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 3D383D621EBD27B9005632C8;
			remoteInfo = \\"double-conversion-tvOS\\";
		};
		2DF0FFEA2056DD460020B375 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 146833FF1AC3E56700842450 /* React.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 9936F3131F5F2E4B0010BF04;
			remoteInfo = privatedata;
		};
		2DF0FFEC2056DD460020B375 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 146833FF1AC3E56700842450 /* React.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 9936F32F1F5F2E5B0010BF04;
			remoteInfo = \\"privatedata-tvOS\\";
		};
		3DAD3E831DF850E9000B6D8A /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 00C302BB1ABCB91800DB3ED1 /* RCTImage.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 2D2A283A1D9B042B00D4039D;
			remoteInfo = \\"RCTImage-tvOS\\";
		};
		3DAD3E871DF850E9000B6D8A /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 78C398B01ACF4ADC00677621 /* RCTLinking.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 2D2A28471D9B043800D4039D;
			remoteInfo = \\"RCTLinking-tvOS\\";
		};
		3DAD3E8B1DF850E9000B6D8A /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 00C302D31ABCB9D200DB3ED1 /* RCTNetwork.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 2D2A28541D9B044C00D4039D;
			remoteInfo = \\"RCTNetwork-tvOS\\";
		};
		3DAD3E8F1DF850E9000B6D8A /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 139105B61AF99BAD00B5F7CC /* RCTSettings.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 2D2A28611D9B046600D4039D;
			remoteInfo = \\"RCTSettings-tvOS\\";
		};
		3DAD3E931DF850E9000B6D8A /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 832341B01AAA6A8300B99B32 /* RCTText.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 2D2A287B1D9B048500D4039D;
			remoteInfo = \\"RCTText-tvOS\\";
		};
		3DAD3E981DF850E9000B6D8A /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 139FDEE61B06529A00C62182 /* RCTWebSocket.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 2D2A28881D9B049200D4039D;
			remoteInfo = \\"RCTWebSocket-tvOS\\";
		};
		3DAD3EA21DF850E9000B6D8A /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 146833FF1AC3E56700842450 /* React.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 2D2A28131D9B038B00D4039D;
			remoteInfo = \\"React-tvOS\\";
		};
		3DAD3EA41DF850E9000B6D8A /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 146833FF1AC3E56700842450 /* React.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 3D3C059A1DE3340900C268FA;
			remoteInfo = yoga;
		};
		3DAD3EA61DF850E9000B6D8A /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 146833FF1AC3E56700842450 /* React.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 3D3C06751DE3340C00C268FA;
			remoteInfo = \\"yoga-tvOS\\";
		};
		3DAD3EA81DF850E9000B6D8A /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 146833FF1AC3E56700842450 /* React.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 3D3CD9251DE5FBEC00167DC4;
			remoteInfo = cxxreact;
		};
		3DAD3EAA1DF850E9000B6D8A /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 146833FF1AC3E56700842450 /* React.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 3D3CD9321DE5FBEE00167DC4;
			remoteInfo = \\"cxxreact-tvOS\\";
		};
		3DAD3EAC1DF850E9000B6D8A /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 146833FF1AC3E56700842450 /* React.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 3D3CD90B1DE5FBD600167DC4;
			remoteInfo = jschelpers;
		};
		3DAD3EAE1DF850E9000B6D8A /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 146833FF1AC3E56700842450 /* React.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 3D3CD9181DE5FBD800167DC4;
			remoteInfo = \\"jschelpers-tvOS\\";
		};
		5E9157321DD0AC6500FF2AA8 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 5E91572D1DD0AC6500FF2AA8 /* RCTAnimation.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 134814201AA4EA6300B7C361;
			remoteInfo = RCTAnimation;
		};
		5E9157341DD0AC6500FF2AA8 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 5E91572D1DD0AC6500FF2AA8 /* RCTAnimation.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 2D2A28201D9B03D100D4039D;
			remoteInfo = \\"RCTAnimation-tvOS\\";
		};
		78C398B81ACF4ADC00677621 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 78C398B01ACF4ADC00677621 /* RCTLinking.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 134814201AA4EA6300B7C361;
			remoteInfo = RCTLinking;
		};
		832341B41AAA6A8300B99B32 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 832341B01AAA6A8300B99B32 /* RCTText.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 58B5119B1A9E6C1200147676;
			remoteInfo = RCTText;
		};
		ADBDB9261DFEBF0700ED6528 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = ADBDB91F1DFEBF0600ED6528 /* RCTBlob.xcodeproj */;
			proxyType = 2;
			remoteGlobalIDString = 358F4ED71D1E81A9004DF814;
			remoteInfo = RCTBlob;
		};
/* End PBXContainerItemProxy section */

/* Begin PBXFileReference section */
		008F07F21AC5B25A0029DE68 /* main.jsbundle */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = main.jsbundle; sourceTree = \\"<group>\\"; };
		00C302A71ABCB8CE00DB3ED1 /* RCTActionSheet.xcodeproj */ = {isa = PBXFileReference; lastKnownFileType = \\"wrapper.pb-project\\"; name = RCTActionSheet.xcodeproj; path = \\"../node_modules/react-native/Libraries/ActionSheetIOS/RCTActionSheet.xcodeproj\\"; sourceTree = \\"<group>\\"; };
		00C302B51ABCB90400DB3ED1 /* RCTGeolocation.xcodeproj */ = {isa = PBXFileReference; lastKnownFileType = \\"wrapper.pb-project\\"; name = RCTGeolocation.xcodeproj; path = \\"../node_modules/react-native/Libraries/Geolocation/RCTGeolocation.xcodeproj\\"; sourceTree = \\"<group>\\"; };
		00C302BB1ABCB91800DB3ED1 /* RCTImage.xcodeproj */ = {isa = PBXFileReference; lastKnownFileType = \\"wrapper.pb-project\\"; name = RCTImage.xcodeproj; path = \\"../node_modules/react-native/Libraries/Image/RCTImage.xcodeproj\\"; sourceTree = \\"<group>\\"; };
		00C302D31ABCB9D200DB3ED1 /* RCTNetwork.xcodeproj */ = {isa = PBXFileReference; lastKnownFileType = \\"wrapper.pb-project\\"; name = RCTNetwork.xcodeproj; path = \\"../node_modules/react-native/Libraries/Network/RCTNetwork.xcodeproj\\"; sourceTree = \\"<group>\\"; };
		00C302DF1ABCB9EE00DB3ED1 /* RCTVibration.xcodeproj */ = {isa = PBXFileReference; lastKnownFileType = \\"wrapper.pb-project\\"; name = RCTVibration.xcodeproj; path = \\"../node_modules/react-native/Libraries/Vibration/RCTVibration.xcodeproj\\"; sourceTree = \\"<group>\\"; };
		00E356EE1AD99517003FC87E /* exampleTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = exampleTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
		00E356F11AD99517003FC87E /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = \\"<group>\\"; };
		00E356F21AD99517003FC87E /* exampleTests.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = exampleTests.m; sourceTree = \\"<group>\\"; };
		139105B61AF99BAD00B5F7CC /* RCTSettings.xcodeproj */ = {isa = PBXFileReference; lastKnownFileType = \\"wrapper.pb-project\\"; name = RCTSettings.xcodeproj; path = \\"../node_modules/react-native/Libraries/Settings/RCTSettings.xcodeproj\\"; sourceTree = \\"<group>\\"; };
		139FDEE61B06529A00C62182 /* RCTWebSocket.xcodeproj */ = {isa = PBXFileReference; lastKnownFileType = \\"wrapper.pb-project\\"; name = RCTWebSocket.xcodeproj; path = \\"../node_modules/react-native/Libraries/WebSocket/RCTWebSocket.xcodeproj\\"; sourceTree = \\"<group>\\"; };
		13B07F961A680F5B00A75B9A /* example.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = example.app; sourceTree = BUILT_PRODUCTS_DIR; };
		13B07FAF1A68108700A75B9A /* AppDelegate.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = AppDelegate.h; path = example/AppDelegate.h; sourceTree = \\"<group>\\"; };
		13B07FB01A68108700A75B9A /* AppDelegate.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; name = AppDelegate.m; path = example/AppDelegate.m; sourceTree = \\"<group>\\"; };
		13B07FB21A68108700A75B9A /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.xib; name = Base; path = Base.lproj/LaunchScreen.xib; sourceTree = \\"<group>\\"; };
		13B07FB51A68108700A75B9A /* Images.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; name = Images.xcassets; path = example/Images.xcassets; sourceTree = \\"<group>\\"; };
		13B07FB61A68108700A75B9A /* Info.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; name = Info.plist; path = example/Info.plist; sourceTree = \\"<group>\\"; };
		13B07FB71A68108700A75B9A /* main.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; name = main.m; path = example/main.m; sourceTree = \\"<group>\\"; };
		146833FF1AC3E56700842450 /* React.xcodeproj */ = {isa = PBXFileReference; lastKnownFileType = \\"wrapper.pb-project\\"; name = React.xcodeproj; path = \\"../node_modules/react-native/React/React.xcodeproj\\"; sourceTree = \\"<group>\\"; };
		2D02E47B1E0B4A5D006451C7 /* example-tvOS.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = \\"example-tvOS.app\\"; sourceTree = BUILT_PRODUCTS_DIR; };
		2D02E4901E0B4A5D006451C7 /* example-tvOSTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = \\"example-tvOSTests.xctest\\"; sourceTree = BUILT_PRODUCTS_DIR; };
		2D16E6891FA4F8E400B85C8A /* libReact.a */ = {isa = PBXFileReference; explicitFileType = archive.ar; path = libReact.a; sourceTree = BUILT_PRODUCTS_DIR; };
		5E91572D1DD0AC6500FF2AA8 /* RCTAnimation.xcodeproj */ = {isa = PBXFileReference; lastKnownFileType = \\"wrapper.pb-project\\"; name = RCTAnimation.xcodeproj; path = \\"../node_modules/react-native/Libraries/NativeAnimation/RCTAnimation.xcodeproj\\"; sourceTree = \\"<group>\\"; };
		78C398B01ACF4ADC00677621 /* RCTLinking.xcodeproj */ = {isa = PBXFileReference; lastKnownFileType = \\"wrapper.pb-project\\"; name = RCTLinking.xcodeproj; path = \\"../node_modules/react-native/Libraries/LinkingIOS/RCTLinking.xcodeproj\\"; sourceTree = \\"<group>\\"; };
		832341B01AAA6A8300B99B32 /* RCTText.xcodeproj */ = {isa = PBXFileReference; lastKnownFileType = \\"wrapper.pb-project\\"; name = RCTText.xcodeproj; path = \\"../node_modules/react-native/Libraries/Text/RCTText.xcodeproj\\"; sourceTree = \\"<group>\\"; };
		ADBDB91F1DFEBF0600ED6528 /* RCTBlob.xcodeproj */ = {isa = PBXFileReference; lastKnownFileType = \\"wrapper.pb-project\\"; name = RCTBlob.xcodeproj; path = \\"../node_modules/react-native/Libraries/Blob/RCTBlob.xcodeproj\\"; sourceTree = \\"<group>\\"; };
		ED297162215061F000B7C4FE /* JavaScriptCore.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = JavaScriptCore.framework; path = System/Library/Frameworks/JavaScriptCore.framework; sourceTree = SDKROOT; };
		ED2971642150620600B7C4FE /* JavaScriptCore.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = JavaScriptCore.framework; path = Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS12.0.sdk/System/Library/Frameworks/JavaScriptCore.framework; sourceTree = DEVELOPER_DIR; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		00E356EB1AD99517003FC87E /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				140ED2AC1D01E1AD002B40FF /* libReact.a in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		13B07F8C1A680F5B00A75B9A /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				ED297163215061F000B7C4FE /* JavaScriptCore.framework in Frameworks */,
				ADBDB9381DFEBF1600ED6528 /* libRCTBlob.a in Frameworks */,
				11D1A2F320CAFA9E000508D9 /* libRCTAnimation.a in Frameworks */,
				146834051AC3E58100842450 /* libReact.a in Frameworks */,
				00C302E51ABCBA2D00DB3ED1 /* libRCTActionSheet.a in Frameworks */,
				00C302E71ABCBA2D00DB3ED1 /* libRCTGeolocation.a in Frameworks */,
				00C302E81ABCBA2D00DB3ED1 /* libRCTImage.a in Frameworks */,
				133E29F31AD74F7200F7D852 /* libRCTLinking.a in Frameworks */,
				00C302E91ABCBA2D00DB3ED1 /* libRCTNetwork.a in Frameworks */,
				139105C61AF99C1200B5F7CC /* libRCTSettings.a in Frameworks */,
				832341BD1AAA6AB300B99B32 /* libRCTText.a in Frameworks */,
				00C302EA1ABCBA2D00DB3ED1 /* libRCTVibration.a in Frameworks */,
				139FDEF61B0652A700C62182 /* libRCTWebSocket.a in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		2D02E4781E0B4A5D006451C7 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				ED2971652150620600B7C4FE /* JavaScriptCore.framework in Frameworks */,
				2D16E6881FA4F8E400B85C8A /* libReact.a in Frameworks */,
				2D02E4C21E0B4AEC006451C7 /* libRCTAnimation.a in Frameworks */,
				2D02E4C31E0B4AEC006451C7 /* libRCTImage-tvOS.a in Frameworks */,
				2D02E4C41E0B4AEC006451C7 /* libRCTLinking-tvOS.a in Frameworks */,
				2D02E4C51E0B4AEC006451C7 /* libRCTNetwork-tvOS.a in Frameworks */,
				2D02E4C61E0B4AEC006451C7 /* libRCTSettings-tvOS.a in Frameworks */,
				2D02E4C71E0B4AEC006451C7 /* libRCTText-tvOS.a in Frameworks */,
				2D02E4C81E0B4AEC006451C7 /* libRCTWebSocket-tvOS.a in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		2D02E48D1E0B4A5D006451C7 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				2DF0FFEE2056DD460020B375 /* libReact.a in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		00C302A81ABCB8CE00DB3ED1 /* Products */ = {
			isa = PBXGroup;
			children = (
				00C302AC1ABCB8CE00DB3ED1 /* libRCTActionSheet.a */,
			);
			name = Products;
			sourceTree = \\"<group>\\";
		};
		00C302B61ABCB90400DB3ED1 /* Products */ = {
			isa = PBXGroup;
			children = (
				00C302BA1ABCB90400DB3ED1 /* libRCTGeolocation.a */,
			);
			name = Products;
			sourceTree = \\"<group>\\";
		};
		00C302BC1ABCB91800DB3ED1 /* Products */ = {
			isa = PBXGroup;
			children = (
				00C302C01ABCB91800DB3ED1 /* libRCTImage.a */,
				3DAD3E841DF850E9000B6D8A /* libRCTImage-tvOS.a */,
			);
			name = Products;
			sourceTree = \\"<group>\\";
		};
		00C302D41ABCB9D200DB3ED1 /* Products */ = {
			isa = PBXGroup;
			children = (
				00C302DC1ABCB9D200DB3ED1 /* libRCTNetwork.a */,
				3DAD3E8C1DF850E9000B6D8A /* libRCTNetwork-tvOS.a */,
			);
			name = Products;
			sourceTree = \\"<group>\\";
		};
		00C302E01ABCB9EE00DB3ED1 /* Products */ = {
			isa = PBXGroup;
			children = (
				00C302E41ABCB9EE00DB3ED1 /* libRCTVibration.a */,
			);
			name = Products;
			sourceTree = \\"<group>\\";
		};
		00E356EF1AD99517003FC87E /* exampleTests */ = {
			isa = PBXGroup;
			children = (
				00E356F21AD99517003FC87E /* exampleTests.m */,
				00E356F01AD99517003FC87E /* Supporting Files */,
			);
			path = exampleTests;
			sourceTree = \\"<group>\\";
		};
		00E356F01AD99517003FC87E /* Supporting Files */ = {
			isa = PBXGroup;
			children = (
				00E356F11AD99517003FC87E /* Info.plist */,
			);
			name = \\"Supporting Files\\";
			sourceTree = \\"<group>\\";
		};
		139105B71AF99BAD00B5F7CC /* Products */ = {
			isa = PBXGroup;
			children = (
				139105C11AF99BAD00B5F7CC /* libRCTSettings.a */,
				3DAD3E901DF850E9000B6D8A /* libRCTSettings-tvOS.a */,
			);
			name = Products;
			sourceTree = \\"<group>\\";
		};
		139FDEE71B06529A00C62182 /* Products */ = {
			isa = PBXGroup;
			children = (
				139FDEF41B06529B00C62182 /* libRCTWebSocket.a */,
				3DAD3E991DF850E9000B6D8A /* libRCTWebSocket-tvOS.a */,
				2D16E6841FA4F8DC00B85C8A /* libfishhook.a */,
				2D16E6861FA4F8DC00B85C8A /* libfishhook-tvOS.a */,
			);
			name = Products;
			sourceTree = \\"<group>\\";
		};
		13B07FAE1A68108700A75B9A /* example */ = {
			isa = PBXGroup;
			children = (
				008F07F21AC5B25A0029DE68 /* main.jsbundle */,
				13B07FAF1A68108700A75B9A /* AppDelegate.h */,
				13B07FB01A68108700A75B9A /* AppDelegate.m */,
				13B07FB51A68108700A75B9A /* Images.xcassets */,
				13B07FB61A68108700A75B9A /* Info.plist */,
				13B07FB11A68108700A75B9A /* LaunchScreen.xib */,
				13B07FB71A68108700A75B9A /* main.m */,
			);
			name = example;
			sourceTree = \\"<group>\\";
		};
		146834001AC3E56700842450 /* Products */ = {
			isa = PBXGroup;
			children = (
				146834041AC3E56700842450 /* libReact.a */,
				3DAD3EA31DF850E9000B6D8A /* libReact.a */,
				3DAD3EA51DF850E9000B6D8A /* libyoga.a */,
				3DAD3EA71DF850E9000B6D8A /* libyoga.a */,
				3DAD3EA91DF850E9000B6D8A /* libcxxreact.a */,
				3DAD3EAB1DF850E9000B6D8A /* libcxxreact.a */,
				3DAD3EAD1DF850E9000B6D8A /* libjschelpers.a */,
				3DAD3EAF1DF850E9000B6D8A /* libjschelpers.a */,
				2DF0FFDF2056DD460020B375 /* libjsinspector.a */,
				2DF0FFE12056DD460020B375 /* libjsinspector-tvOS.a */,
				2DF0FFE32056DD460020B375 /* libthird-party.a */,
				2DF0FFE52056DD460020B375 /* libthird-party.a */,
				2DF0FFE72056DD460020B375 /* libdouble-conversion.a */,
				2DF0FFE92056DD460020B375 /* libdouble-conversion.a */,
				2DF0FFEB2056DD460020B375 /* libprivatedata.a */,
				2DF0FFED2056DD460020B375 /* libprivatedata-tvOS.a */,
			);
			name = Products;
			sourceTree = \\"<group>\\";
		};
		2D16E6871FA4F8E400B85C8A /* Frameworks */ = {
			isa = PBXGroup;
			children = (
				ED297162215061F000B7C4FE /* JavaScriptCore.framework */,
				ED2971642150620600B7C4FE /* JavaScriptCore.framework */,
				2D16E6891FA4F8E400B85C8A /* libReact.a */,
			);
			name = Frameworks;
			sourceTree = \\"<group>\\";
		};
		5E91572E1DD0AC6500FF2AA8 /* Products */ = {
			isa = PBXGroup;
			children = (
				5E9157331DD0AC6500FF2AA8 /* libRCTAnimation.a */,
				5E9157351DD0AC6500FF2AA8 /* libRCTAnimation.a */,
			);
			name = Products;
			sourceTree = \\"<group>\\";
		};
		78C398B11ACF4ADC00677621 /* Products */ = {
			isa = PBXGroup;
			children = (
				78C398B91ACF4ADC00677621 /* libRCTLinking.a */,
				3DAD3E881DF850E9000B6D8A /* libRCTLinking-tvOS.a */,
			);
			name = Products;
			sourceTree = \\"<group>\\";
		};
		832341AE1AAA6A7D00B99B32 /* Libraries */ = {
			isa = PBXGroup;
			children = (
				5E91572D1DD0AC6500FF2AA8 /* RCTAnimation.xcodeproj */,
				146833FF1AC3E56700842450 /* React.xcodeproj */,
				00C302A71ABCB8CE00DB3ED1 /* RCTActionSheet.xcodeproj */,
				ADBDB91F1DFEBF0600ED6528 /* RCTBlob.xcodeproj */,
				00C302B51ABCB90400DB3ED1 /* RCTGeolocation.xcodeproj */,
				00C302BB1ABCB91800DB3ED1 /* RCTImage.xcodeproj */,
				78C398B01ACF4ADC00677621 /* RCTLinking.xcodeproj */,
				00C302D31ABCB9D200DB3ED1 /* RCTNetwork.xcodeproj */,
				139105B61AF99BAD00B5F7CC /* RCTSettings.xcodeproj */,
				832341B01AAA6A8300B99B32 /* RCTText.xcodeproj */,
				00C302DF1ABCB9EE00DB3ED1 /* RCTVibration.xcodeproj */,
				139FDEE61B06529A00C62182 /* RCTWebSocket.xcodeproj */,
			);
			name = Libraries;
			sourceTree = \\"<group>\\";
		};
		832341B11AAA6A8300B99B32 /* Products */ = {
			isa = PBXGroup;
			children = (
				832341B51AAA6A8300B99B32 /* libRCTText.a */,
				3DAD3E941DF850E9000B6D8A /* libRCTText-tvOS.a */,
			);
			name = Products;
			sourceTree = \\"<group>\\";
		};
		83CBB9F61A601CBA00E9B192 = {
			isa = PBXGroup;
			children = (
				13B07FAE1A68108700A75B9A /* example */,
				832341AE1AAA6A7D00B99B32 /* Libraries */,
				00E356EF1AD99517003FC87E /* exampleTests */,
				83CBBA001A601CBA00E9B192 /* Products */,
				2D16E6871FA4F8E400B85C8A /* Frameworks */,
			);
			indentWidth = 2;
			sourceTree = \\"<group>\\";
			tabWidth = 2;
			usesTabs = 0;
		};
		83CBBA001A601CBA00E9B192 /* Products */ = {
			isa = PBXGroup;
			children = (
				13B07F961A680F5B00A75B9A /* example.app */,
				00E356EE1AD99517003FC87E /* exampleTests.xctest */,
				2D02E47B1E0B4A5D006451C7 /* example-tvOS.app */,
				2D02E4901E0B4A5D006451C7 /* example-tvOSTests.xctest */,
			);
			name = Products;
			sourceTree = \\"<group>\\";
		};
		ADBDB9201DFEBF0600ED6528 /* Products */ = {
			isa = PBXGroup;
			children = (
				ADBDB9271DFEBF0700ED6528 /* libRCTBlob.a */,
				2D16E6721FA4F8DC00B85C8A /* libRCTBlob-tvOS.a */,
			);
			name = Products;
			sourceTree = \\"<group>\\";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		00E356ED1AD99517003FC87E /* exampleTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 00E357021AD99517003FC87E /* Build configuration list for PBXNativeTarget \\"exampleTests\\" */;
			buildPhases = (
				00E356EA1AD99517003FC87E /* Sources */,
				00E356EB1AD99517003FC87E /* Frameworks */,
				00E356EC1AD99517003FC87E /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
				00E356F51AD99517003FC87E /* PBXTargetDependency */,
			);
			name = exampleTests;
			productName = exampleTests;
			productReference = 00E356EE1AD99517003FC87E /* exampleTests.xctest */;
			productType = \\"com.apple.product-type.bundle.unit-test\\";
		};
		13B07F861A680F5B00A75B9A /* example */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 13B07F931A680F5B00A75B9A /* Build configuration list for PBXNativeTarget \\"example\\" */;
			buildPhases = (
				13B07F871A680F5B00A75B9A /* Sources */,
				13B07F8C1A680F5B00A75B9A /* Frameworks */,
				13B07F8E1A680F5B00A75B9A /* Resources */,
				00DD1BFF1BD5951E006B06BC /* Bundle React Native code and images */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = example;
			productName = \\"Hello World\\";
			productReference = 13B07F961A680F5B00A75B9A /* example.app */;
			productType = \\"com.apple.product-type.application\\";
		};
		2D02E47A1E0B4A5D006451C7 /* example-tvOS */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 2D02E4BA1E0B4A5E006451C7 /* Build configuration list for PBXNativeTarget \\"example-tvOS\\" */;
			buildPhases = (
				2D02E4771E0B4A5D006451C7 /* Sources */,
				2D02E4781E0B4A5D006451C7 /* Frameworks */,
				2D02E4791E0B4A5D006451C7 /* Resources */,
				2D02E4CB1E0B4B27006451C7 /* Bundle React Native Code And Images */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = \\"example-tvOS\\";
			productName = \\"example-tvOS\\";
			productReference = 2D02E47B1E0B4A5D006451C7 /* example-tvOS.app */;
			productType = \\"com.apple.product-type.application\\";
		};
		2D02E48F1E0B4A5D006451C7 /* example-tvOSTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 2D02E4BB1E0B4A5E006451C7 /* Build configuration list for PBXNativeTarget \\"example-tvOSTests\\" */;
			buildPhases = (
				2D02E48C1E0B4A5D006451C7 /* Sources */,
				2D02E48D1E0B4A5D006451C7 /* Frameworks */,
				2D02E48E1E0B4A5D006451C7 /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
				2D02E4921E0B4A5D006451C7 /* PBXTargetDependency */,
			);
			name = \\"example-tvOSTests\\";
			productName = \\"example-tvOSTests\\";
			productReference = 2D02E4901E0B4A5D006451C7 /* example-tvOSTests.xctest */;
			productType = \\"com.apple.product-type.bundle.unit-test\\";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		83CBB9F71A601CBA00E9B192 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 0940;
				ORGANIZATIONNAME = Facebook;
				TargetAttributes = {
					00E356ED1AD99517003FC87E = {
						CreatedOnToolsVersion = 6.2;
						TestTargetID = 13B07F861A680F5B00A75B9A;
					};
					2D02E47A1E0B4A5D006451C7 = {
						CreatedOnToolsVersion = 8.2.1;
						ProvisioningStyle = Automatic;
					};
					2D02E48F1E0B4A5D006451C7 = {
						CreatedOnToolsVersion = 8.2.1;
						ProvisioningStyle = Automatic;
						TestTargetID = 2D02E47A1E0B4A5D006451C7;
					};
				};
			};
			buildConfigurationList = 83CBB9FA1A601CBA00E9B192 /* Build configuration list for PBXProject \\"example\\" */;
			compatibilityVersion = \\"Xcode 3.2\\";
			developmentRegion = English;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 83CBB9F61A601CBA00E9B192;
			productRefGroup = 83CBBA001A601CBA00E9B192 /* Products */;
			projectDirPath = \\"\\";
			projectReferences = (
				{
					ProductGroup = 00C302A81ABCB8CE00DB3ED1 /* Products */;
					ProjectRef = 00C302A71ABCB8CE00DB3ED1 /* RCTActionSheet.xcodeproj */;
				},
				{
					ProductGroup = 5E91572E1DD0AC6500FF2AA8 /* Products */;
					ProjectRef = 5E91572D1DD0AC6500FF2AA8 /* RCTAnimation.xcodeproj */;
				},
				{
					ProductGroup = ADBDB9201DFEBF0600ED6528 /* Products */;
					ProjectRef = ADBDB91F1DFEBF0600ED6528 /* RCTBlob.xcodeproj */;
				},
				{
					ProductGroup = 00C302B61ABCB90400DB3ED1 /* Products */;
					ProjectRef = 00C302B51ABCB90400DB3ED1 /* RCTGeolocation.xcodeproj */;
				},
				{
					ProductGroup = 00C302BC1ABCB91800DB3ED1 /* Products */;
					ProjectRef = 00C302BB1ABCB91800DB3ED1 /* RCTImage.xcodeproj */;
				},
				{
					ProductGroup = 78C398B11ACF4ADC00677621 /* Products */;
					ProjectRef = 78C398B01ACF4ADC00677621 /* RCTLinking.xcodeproj */;
				},
				{
					ProductGroup = 00C302D41ABCB9D200DB3ED1 /* Products */;
					ProjectRef = 00C302D31ABCB9D200DB3ED1 /* RCTNetwork.xcodeproj */;
				},
				{
					ProductGroup = 139105B71AF99BAD00B5F7CC /* Products */;
					ProjectRef = 139105B61AF99BAD00B5F7CC /* RCTSettings.xcodeproj */;
				},
				{
					ProductGroup = 832341B11AAA6A8300B99B32 /* Products */;
					ProjectRef = 832341B01AAA6A8300B99B32 /* RCTText.xcodeproj */;
				},
				{
					ProductGroup = 00C302E01ABCB9EE00DB3ED1 /* Products */;
					ProjectRef = 00C302DF1ABCB9EE00DB3ED1 /* RCTVibration.xcodeproj */;
				},
				{
					ProductGroup = 139FDEE71B06529A00C62182 /* Products */;
					ProjectRef = 139FDEE61B06529A00C62182 /* RCTWebSocket.xcodeproj */;
				},
				{
					ProductGroup = 146834001AC3E56700842450 /* Products */;
					ProjectRef = 146833FF1AC3E56700842450 /* React.xcodeproj */;
				},
			);
			projectRoot = \\"\\";
			targets = (
				13B07F861A680F5B00A75B9A /* example */,
				00E356ED1AD99517003FC87E /* exampleTests */,
				2D02E47A1E0B4A5D006451C7 /* example-tvOS */,
				2D02E48F1E0B4A5D006451C7 /* example-tvOSTests */,
			);
		};
/* End PBXProject section */

/* Begin PBXReferenceProxy section */
		00C302AC1ABCB8CE00DB3ED1 /* libRCTActionSheet.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libRCTActionSheet.a;
			remoteRef = 00C302AB1ABCB8CE00DB3ED1 /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		00C302BA1ABCB90400DB3ED1 /* libRCTGeolocation.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libRCTGeolocation.a;
			remoteRef = 00C302B91ABCB90400DB3ED1 /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		00C302C01ABCB91800DB3ED1 /* libRCTImage.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libRCTImage.a;
			remoteRef = 00C302BF1ABCB91800DB3ED1 /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		00C302DC1ABCB9D200DB3ED1 /* libRCTNetwork.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libRCTNetwork.a;
			remoteRef = 00C302DB1ABCB9D200DB3ED1 /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		00C302E41ABCB9EE00DB3ED1 /* libRCTVibration.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libRCTVibration.a;
			remoteRef = 00C302E31ABCB9EE00DB3ED1 /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		139105C11AF99BAD00B5F7CC /* libRCTSettings.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libRCTSettings.a;
			remoteRef = 139105C01AF99BAD00B5F7CC /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		139FDEF41B06529B00C62182 /* libRCTWebSocket.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libRCTWebSocket.a;
			remoteRef = 139FDEF31B06529B00C62182 /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		146834041AC3E56700842450 /* libReact.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libReact.a;
			remoteRef = 146834031AC3E56700842450 /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		2D16E6721FA4F8DC00B85C8A /* libRCTBlob-tvOS.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = \\"libRCTBlob-tvOS.a\\";
			remoteRef = 2D16E6711FA4F8DC00B85C8A /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		2D16E6841FA4F8DC00B85C8A /* libfishhook.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libfishhook.a;
			remoteRef = 2D16E6831FA4F8DC00B85C8A /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		2D16E6861FA4F8DC00B85C8A /* libfishhook-tvOS.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = \\"libfishhook-tvOS.a\\";
			remoteRef = 2D16E6851FA4F8DC00B85C8A /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		2DF0FFDF2056DD460020B375 /* libjsinspector.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libjsinspector.a;
			remoteRef = 2DF0FFDE2056DD460020B375 /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		2DF0FFE12056DD460020B375 /* libjsinspector-tvOS.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = \\"libjsinspector-tvOS.a\\";
			remoteRef = 2DF0FFE02056DD460020B375 /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		2DF0FFE32056DD460020B375 /* libthird-party.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = \\"libthird-party.a\\";
			remoteRef = 2DF0FFE22056DD460020B375 /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		2DF0FFE52056DD460020B375 /* libthird-party.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = \\"libthird-party.a\\";
			remoteRef = 2DF0FFE42056DD460020B375 /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		2DF0FFE72056DD460020B375 /* libdouble-conversion.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = \\"libdouble-conversion.a\\";
			remoteRef = 2DF0FFE62056DD460020B375 /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		2DF0FFE92056DD460020B375 /* libdouble-conversion.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = \\"libdouble-conversion.a\\";
			remoteRef = 2DF0FFE82056DD460020B375 /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		2DF0FFEB2056DD460020B375 /* libprivatedata.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libprivatedata.a;
			remoteRef = 2DF0FFEA2056DD460020B375 /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		2DF0FFED2056DD460020B375 /* libprivatedata-tvOS.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = \\"libprivatedata-tvOS.a\\";
			remoteRef = 2DF0FFEC2056DD460020B375 /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		3DAD3E841DF850E9000B6D8A /* libRCTImage-tvOS.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = \\"libRCTImage-tvOS.a\\";
			remoteRef = 3DAD3E831DF850E9000B6D8A /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		3DAD3E881DF850E9000B6D8A /* libRCTLinking-tvOS.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = \\"libRCTLinking-tvOS.a\\";
			remoteRef = 3DAD3E871DF850E9000B6D8A /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		3DAD3E8C1DF850E9000B6D8A /* libRCTNetwork-tvOS.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = \\"libRCTNetwork-tvOS.a\\";
			remoteRef = 3DAD3E8B1DF850E9000B6D8A /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		3DAD3E901DF850E9000B6D8A /* libRCTSettings-tvOS.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = \\"libRCTSettings-tvOS.a\\";
			remoteRef = 3DAD3E8F1DF850E9000B6D8A /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		3DAD3E941DF850E9000B6D8A /* libRCTText-tvOS.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = \\"libRCTText-tvOS.a\\";
			remoteRef = 3DAD3E931DF850E9000B6D8A /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		3DAD3E991DF850E9000B6D8A /* libRCTWebSocket-tvOS.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = \\"libRCTWebSocket-tvOS.a\\";
			remoteRef = 3DAD3E981DF850E9000B6D8A /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		3DAD3EA31DF850E9000B6D8A /* libReact.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libReact.a;
			remoteRef = 3DAD3EA21DF850E9000B6D8A /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		3DAD3EA51DF850E9000B6D8A /* libyoga.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libyoga.a;
			remoteRef = 3DAD3EA41DF850E9000B6D8A /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		3DAD3EA71DF850E9000B6D8A /* libyoga.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libyoga.a;
			remoteRef = 3DAD3EA61DF850E9000B6D8A /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		3DAD3EA91DF850E9000B6D8A /* libcxxreact.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libcxxreact.a;
			remoteRef = 3DAD3EA81DF850E9000B6D8A /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		3DAD3EAB1DF850E9000B6D8A /* libcxxreact.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libcxxreact.a;
			remoteRef = 3DAD3EAA1DF850E9000B6D8A /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		3DAD3EAD1DF850E9000B6D8A /* libjschelpers.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libjschelpers.a;
			remoteRef = 3DAD3EAC1DF850E9000B6D8A /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		3DAD3EAF1DF850E9000B6D8A /* libjschelpers.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libjschelpers.a;
			remoteRef = 3DAD3EAE1DF850E9000B6D8A /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		5E9157331DD0AC6500FF2AA8 /* libRCTAnimation.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libRCTAnimation.a;
			remoteRef = 5E9157321DD0AC6500FF2AA8 /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		5E9157351DD0AC6500FF2AA8 /* libRCTAnimation.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libRCTAnimation.a;
			remoteRef = 5E9157341DD0AC6500FF2AA8 /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		78C398B91ACF4ADC00677621 /* libRCTLinking.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libRCTLinking.a;
			remoteRef = 78C398B81ACF4ADC00677621 /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		832341B51AAA6A8300B99B32 /* libRCTText.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libRCTText.a;
			remoteRef = 832341B41AAA6A8300B99B32 /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		ADBDB9271DFEBF0700ED6528 /* libRCTBlob.a */ = {
			isa = PBXReferenceProxy;
			fileType = archive.ar;
			path = libRCTBlob.a;
			remoteRef = ADBDB9261DFEBF0700ED6528 /* PBXContainerItemProxy */;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
/* End PBXReferenceProxy section */

/* Begin PBXResourcesBuildPhase section */
		00E356EC1AD99517003FC87E /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		13B07F8E1A680F5B00A75B9A /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				13B07FBF1A68108700A75B9A /* Images.xcassets in Resources */,
				13B07FBD1A68108700A75B9A /* LaunchScreen.xib in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		2D02E4791E0B4A5D006451C7 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				2D02E4BD1E0B4A84006451C7 /* Images.xcassets in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		2D02E48E1E0B4A5D006451C7 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		00DD1BFF1BD5951E006B06BC /* Bundle React Native code and images */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			name = \\"Bundle React Native code and images\\";
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = \\"export NODE_BINARY=node\\\\n../node_modules/react-native/scripts/react-native-xcode.sh\\";
		};
		2D02E4CB1E0B4B27006451C7 /* Bundle React Native Code And Images */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			name = \\"Bundle React Native Code And Images\\";
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = \\"export NODE_BINARY=node\\\\n../node_modules/react-native/scripts/react-native-xcode.sh\\";
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		00E356EA1AD99517003FC87E /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				00E356F31AD99517003FC87E /* exampleTests.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		13B07F871A680F5B00A75B9A /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				13B07FBC1A68108700A75B9A /* AppDelegate.m in Sources */,
				13B07FC11A68108700A75B9A /* main.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		2D02E4771E0B4A5D006451C7 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				2D02E4BF1E0B4AB3006451C7 /* main.m in Sources */,
				2D02E4BC1E0B4A80006451C7 /* AppDelegate.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		2D02E48C1E0B4A5D006451C7 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				2DCD954D1E0B4F2C00145EB5 /* exampleTests.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXTargetDependency section */
		00E356F51AD99517003FC87E /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 13B07F861A680F5B00A75B9A /* example */;
			targetProxy = 00E356F41AD99517003FC87E /* PBXContainerItemProxy */;
		};
		2D02E4921E0B4A5D006451C7 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 2D02E47A1E0B4A5D006451C7 /* example-tvOS */;
			targetProxy = 2D02E4911E0B4A5D006451C7 /* PBXContainerItemProxy */;
		};
/* End PBXTargetDependency section */

/* Begin PBXVariantGroup section */
		13B07FB11A68108700A75B9A /* LaunchScreen.xib */ = {
			isa = PBXVariantGroup;
			children = (
				13B07FB21A68108700A75B9A /* Base */,
			);
			name = LaunchScreen.xib;
			path = example;
			sourceTree = \\"<group>\\";
		};
/* End PBXVariantGroup section */

/* Begin XCBuildConfiguration section */
		00E356F61AD99517003FC87E /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				BUNDLE_LOADER = \\"$(TEST_HOST)\\";
				GCC_PREPROCESSOR_DEFINITIONS = (
					\\"DEBUG=1\\",
					\\"$(inherited)\\",
				);
				INFOPLIST_FILE = exampleTests/Info.plist;
				IPHONEOS_DEPLOYMENT_TARGET = 9.0;
				LD_RUNPATH_SEARCH_PATHS = \\"$(inherited) @executable_path/Frameworks @loader_path/Frameworks\\";
				OTHER_LDFLAGS = (
					\\"-ObjC\\",
					\\"-lc++\\",
				);
				PRODUCT_BUNDLE_IDENTIFIER = \\"org.reactjs.native.example.$(PRODUCT_NAME:rfc1034identifier)\\";
				PRODUCT_NAME = \\"$(TARGET_NAME)\\";
				TEST_HOST = \\"$(BUILT_PRODUCTS_DIR)/example.app/example\\";
			};
			name = Debug;
		};
		00E356F71AD99517003FC87E /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				BUNDLE_LOADER = \\"$(TEST_HOST)\\";
				COPY_PHASE_STRIP = NO;
				INFOPLIST_FILE = exampleTests/Info.plist;
				IPHONEOS_DEPLOYMENT_TARGET = 9.0;
				LD_RUNPATH_SEARCH_PATHS = \\"$(inherited) @executable_path/Frameworks @loader_path/Frameworks\\";
				OTHER_LDFLAGS = (
					\\"-ObjC\\",
					\\"-lc++\\",
				);
				PRODUCT_BUNDLE_IDENTIFIER = \\"org.reactjs.native.example.$(PRODUCT_NAME:rfc1034identifier)\\";
				PRODUCT_NAME = \\"$(TARGET_NAME)\\";
				TEST_HOST = \\"$(BUILT_PRODUCTS_DIR)/example.app/example\\";
			};
			name = Release;
		};
		13B07F941A680F5B00A75B9A /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CURRENT_PROJECT_VERSION = 1;
				DEAD_CODE_STRIPPING = NO;
				INFOPLIST_FILE = example/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = \\"$(inherited) @executable_path/Frameworks\\";
				OTHER_LDFLAGS = (
					\\"$(inherited)\\",
					\\"-ObjC\\",
					\\"-lc++\\",
				);
				PRODUCT_BUNDLE_IDENTIFIER = \\"org.reactjs.native.example.$(PRODUCT_NAME:rfc1034identifier)\\";
				PRODUCT_NAME = example;
				VERSIONING_SYSTEM = \\"apple-generic\\";
			};
			name = Debug;
		};
		13B07F951A680F5B00A75B9A /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CURRENT_PROJECT_VERSION = 1;
				INFOPLIST_FILE = example/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = \\"$(inherited) @executable_path/Frameworks\\";
				OTHER_LDFLAGS = (
					\\"$(inherited)\\",
					\\"-ObjC\\",
					\\"-lc++\\",
				);
				PRODUCT_BUNDLE_IDENTIFIER = \\"org.reactjs.native.example.$(PRODUCT_NAME:rfc1034identifier)\\";
				PRODUCT_NAME = example;
				VERSIONING_SYSTEM = \\"apple-generic\\";
			};
			name = Release;
		};
		2D02E4971E0B4A5E006451C7 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = \\"App Icon & Top Shelf Image\\";
				ASSETCATALOG_COMPILER_LAUNCHIMAGE_NAME = LaunchImage;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_TESTABILITY = YES;
				GCC_NO_COMMON_BLOCKS = YES;
				INFOPLIST_FILE = \\"example-tvOS/Info.plist\\";
				LD_RUNPATH_SEARCH_PATHS = \\"$(inherited) @executable_path/Frameworks\\";
				OTHER_LDFLAGS = (
					\\"-ObjC\\",
					\\"-lc++\\",
				);
				PRODUCT_BUNDLE_IDENTIFIER = \\"com.facebook.REACT.example-tvOS\\";
				PRODUCT_NAME = \\"$(TARGET_NAME)\\";
				SDKROOT = appletvos;
				TARGETED_DEVICE_FAMILY = 3;
				TVOS_DEPLOYMENT_TARGET = 9.2;
			};
			name = Debug;
		};
		2D02E4981E0B4A5E006451C7 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = \\"App Icon & Top Shelf Image\\";
				ASSETCATALOG_COMPILER_LAUNCHIMAGE_NAME = LaunchImage;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = \\"dwarf-with-dsym\\";
				GCC_NO_COMMON_BLOCKS = YES;
				INFOPLIST_FILE = \\"example-tvOS/Info.plist\\";
				LD_RUNPATH_SEARCH_PATHS = \\"$(inherited) @executable_path/Frameworks\\";
				OTHER_LDFLAGS = (
					\\"-ObjC\\",
					\\"-lc++\\",
				);
				PRODUCT_BUNDLE_IDENTIFIER = \\"com.facebook.REACT.example-tvOS\\";
				PRODUCT_NAME = \\"$(TARGET_NAME)\\";
				SDKROOT = appletvos;
				TARGETED_DEVICE_FAMILY = 3;
				TVOS_DEPLOYMENT_TARGET = 9.2;
			};
			name = Release;
		};
		2D02E4991E0B4A5E006451C7 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				BUNDLE_LOADER = \\"$(TEST_HOST)\\";
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_TESTABILITY = YES;
				GCC_NO_COMMON_BLOCKS = YES;
				INFOPLIST_FILE = \\"example-tvOSTests/Info.plist\\";
				LD_RUNPATH_SEARCH_PATHS = \\"$(inherited) @executable_path/Frameworks @loader_path/Frameworks\\";
				OTHER_LDFLAGS = (
					\\"-ObjC\\",
					\\"-lc++\\",
				);
				PRODUCT_BUNDLE_IDENTIFIER = \\"com.facebook.REACT.example-tvOSTests\\";
				PRODUCT_NAME = \\"$(TARGET_NAME)\\";
				SDKROOT = appletvos;
				TEST_HOST = \\"$(BUILT_PRODUCTS_DIR)/example-tvOS.app/example-tvOS\\";
				TVOS_DEPLOYMENT_TARGET = 10.1;
			};
			name = Debug;
		};
		2D02E49A1E0B4A5E006451C7 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				BUNDLE_LOADER = \\"$(TEST_HOST)\\";
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = \\"dwarf-with-dsym\\";
				GCC_NO_COMMON_BLOCKS = YES;
				INFOPLIST_FILE = \\"example-tvOSTests/Info.plist\\";
				LD_RUNPATH_SEARCH_PATHS = \\"$(inherited) @executable_path/Frameworks @loader_path/Frameworks\\";
				OTHER_LDFLAGS = (
					\\"-ObjC\\",
					\\"-lc++\\",
				);
				PRODUCT_BUNDLE_IDENTIFIER = \\"com.facebook.REACT.example-tvOSTests\\";
				PRODUCT_NAME = \\"$(TARGET_NAME)\\";
				SDKROOT = appletvos;
				TEST_HOST = \\"$(BUILT_PRODUCTS_DIR)/example-tvOS.app/example-tvOS\\";
				TVOS_DEPLOYMENT_TARGET = 10.1;
			};
			name = Release;
		};
		83CBBA201A601CBA00E9B192 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_CXX_LANGUAGE_STANDARD = \\"gnu++0x\\";
				CLANG_CXX_LIBRARY = \\"libc++\\";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				\\"CODE_SIGN_IDENTITY[sdk=iphoneos*]\\" = \\"iPhone Developer\\";
				COPY_PHASE_STRIP = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					\\"DEBUG=1\\",
					\\"$(inherited)\\",
				);
				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 9.0;
				MTL_ENABLE_DEBUG_INFO = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = iphoneos;
			};
			name = Debug;
		};
		83CBBA211A601CBA00E9B192 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_CXX_LANGUAGE_STANDARD = \\"gnu++0x\\";
				CLANG_CXX_LIBRARY = \\"libc++\\";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				\\"CODE_SIGN_IDENTITY[sdk=iphoneos*]\\" = \\"iPhone Developer\\";
				COPY_PHASE_STRIP = YES;
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 9.0;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = iphoneos;
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		00E357021AD99517003FC87E /* Build configuration list for PBXNativeTarget \\"exampleTests\\" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				00E356F61AD99517003FC87E /* Debug */,
				00E356F71AD99517003FC87E /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		13B07F931A680F5B00A75B9A /* Build configuration list for PBXNativeTarget \\"example\\" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				13B07F941A680F5B00A75B9A /* Debug */,
				13B07F951A680F5B00A75B9A /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		2D02E4BA1E0B4A5E006451C7 /* Build configuration list for PBXNativeTarget \\"example-tvOS\\" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				2D02E4971E0B4A5E006451C7 /* Debug */,
				2D02E4981E0B4A5E006451C7 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		2D02E4BB1E0B4A5E006451C7 /* Build configuration list for PBXNativeTarget \\"example-tvOSTests\\" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				2D02E4991E0B4A5E006451C7 /* Debug */,
				2D02E49A1E0B4A5E006451C7 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		83CBB9FA1A601CBA00E9B192 /* Build configuration list for PBXProject \\"example\\" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				83CBBA201A601CBA00E9B192 /* Debug */,
				83CBBA211A601CBA00E9B192 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 83CBB9F71A601CBA00E9B192 /* Project object */;
}
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/ios/example.xcodeproj/xcshareddata/xcschemes/example-tvOS.xcscheme",
    "theContent": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<Scheme
   LastUpgradeVersion = \\"0940\\"
   version = \\"1.3\\">
   <BuildAction
      parallelizeBuildables = \\"NO\\"
      buildImplicitDependencies = \\"YES\\">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = \\"YES\\"
            buildForRunning = \\"YES\\"
            buildForProfiling = \\"YES\\"
            buildForArchiving = \\"YES\\"
            buildForAnalyzing = \\"YES\\">
            <BuildableReference
               BuildableIdentifier = \\"primary\\"
               BlueprintIdentifier = \\"2D2A28121D9B038B00D4039D\\"
               BuildableName = \\"libReact.a\\"
               BlueprintName = \\"React-tvOS\\"
               ReferencedContainer = \\"container:../node_modules/react-native/React/React.xcodeproj\\">
            </BuildableReference>
         </BuildActionEntry>
         <BuildActionEntry
            buildForTesting = \\"YES\\"
            buildForRunning = \\"YES\\"
            buildForProfiling = \\"YES\\"
            buildForArchiving = \\"YES\\"
            buildForAnalyzing = \\"YES\\">
            <BuildableReference
               BuildableIdentifier = \\"primary\\"
               BlueprintIdentifier = \\"2D02E47A1E0B4A5D006451C7\\"
               BuildableName = \\"example-tvOS.app\\"
               BlueprintName = \\"example-tvOS\\"
               ReferencedContainer = \\"container:example.xcodeproj\\">
            </BuildableReference>
         </BuildActionEntry>
         <BuildActionEntry
            buildForTesting = \\"YES\\"
            buildForRunning = \\"YES\\"
            buildForProfiling = \\"NO\\"
            buildForArchiving = \\"NO\\"
            buildForAnalyzing = \\"YES\\">
            <BuildableReference
               BuildableIdentifier = \\"primary\\"
               BlueprintIdentifier = \\"2D02E48F1E0B4A5D006451C7\\"
               BuildableName = \\"example-tvOSTests.xctest\\"
               BlueprintName = \\"example-tvOSTests\\"
               ReferencedContainer = \\"container:example.xcodeproj\\">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = \\"Debug\\"
      selectedDebuggerIdentifier = \\"Xcode.DebuggerFoundation.Debugger.LLDB\\"
      selectedLauncherIdentifier = \\"Xcode.DebuggerFoundation.Launcher.LLDB\\"
      shouldUseLaunchSchemeArgsEnv = \\"YES\\">
      <Testables>
         <TestableReference
            skipped = \\"NO\\">
            <BuildableReference
               BuildableIdentifier = \\"primary\\"
               BlueprintIdentifier = \\"2D02E48F1E0B4A5D006451C7\\"
               BuildableName = \\"example-tvOSTests.xctest\\"
               BlueprintName = \\"example-tvOSTests\\"
               ReferencedContainer = \\"container:example.xcodeproj\\">
            </BuildableReference>
         </TestableReference>
      </Testables>
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = \\"primary\\"
            BlueprintIdentifier = \\"2D02E47A1E0B4A5D006451C7\\"
            BuildableName = \\"example-tvOS.app\\"
            BlueprintName = \\"example-tvOS\\"
            ReferencedContainer = \\"container:example.xcodeproj\\">
         </BuildableReference>
      </MacroExpansion>
      <AdditionalOptions>
      </AdditionalOptions>
   </TestAction>
   <LaunchAction
      buildConfiguration = \\"Debug\\"
      selectedDebuggerIdentifier = \\"Xcode.DebuggerFoundation.Debugger.LLDB\\"
      selectedLauncherIdentifier = \\"Xcode.DebuggerFoundation.Launcher.LLDB\\"
      launchStyle = \\"0\\"
      useCustomWorkingDirectory = \\"NO\\"
      ignoresPersistentStateOnLaunch = \\"NO\\"
      debugDocumentVersioning = \\"YES\\"
      debugServiceExtension = \\"internal\\"
      allowLocationSimulation = \\"YES\\">
      <BuildableProductRunnable
         runnableDebuggingMode = \\"0\\">
         <BuildableReference
            BuildableIdentifier = \\"primary\\"
            BlueprintIdentifier = \\"2D02E47A1E0B4A5D006451C7\\"
            BuildableName = \\"example-tvOS.app\\"
            BlueprintName = \\"example-tvOS\\"
            ReferencedContainer = \\"container:example.xcodeproj\\">
         </BuildableReference>
      </BuildableProductRunnable>
      <AdditionalOptions>
      </AdditionalOptions>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = \\"Release\\"
      shouldUseLaunchSchemeArgsEnv = \\"YES\\"
      savedToolIdentifier = \\"\\"
      useCustomWorkingDirectory = \\"NO\\"
      debugDocumentVersioning = \\"YES\\">
      <BuildableProductRunnable
         runnableDebuggingMode = \\"0\\">
         <BuildableReference
            BuildableIdentifier = \\"primary\\"
            BlueprintIdentifier = \\"2D02E47A1E0B4A5D006451C7\\"
            BuildableName = \\"example-tvOS.app\\"
            BlueprintName = \\"example-tvOS\\"
            ReferencedContainer = \\"container:example.xcodeproj\\">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = \\"Debug\\">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = \\"Release\\"
      revealArchiveInOrganizer = \\"YES\\">
   </ArchiveAction>
</Scheme>
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/ios/example.xcodeproj/xcshareddata/xcschemes/example.xcscheme",
    "theContent": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<Scheme
   LastUpgradeVersion = \\"0940\\"
   version = \\"1.3\\">
   <BuildAction
      parallelizeBuildables = \\"NO\\"
      buildImplicitDependencies = \\"YES\\">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = \\"YES\\"
            buildForRunning = \\"YES\\"
            buildForProfiling = \\"YES\\"
            buildForArchiving = \\"YES\\"
            buildForAnalyzing = \\"YES\\">
            <BuildableReference
               BuildableIdentifier = \\"primary\\"
               BlueprintIdentifier = \\"83CBBA2D1A601D0E00E9B192\\"
               BuildableName = \\"libReact.a\\"
               BlueprintName = \\"React\\"
               ReferencedContainer = \\"container:../node_modules/react-native/React/React.xcodeproj\\">
            </BuildableReference>
         </BuildActionEntry>
         <BuildActionEntry
            buildForTesting = \\"YES\\"
            buildForRunning = \\"YES\\"
            buildForProfiling = \\"YES\\"
            buildForArchiving = \\"YES\\"
            buildForAnalyzing = \\"YES\\">
            <BuildableReference
               BuildableIdentifier = \\"primary\\"
               BlueprintIdentifier = \\"13B07F861A680F5B00A75B9A\\"
               BuildableName = \\"example.app\\"
               BlueprintName = \\"example\\"
               ReferencedContainer = \\"container:example.xcodeproj\\">
            </BuildableReference>
         </BuildActionEntry>
         <BuildActionEntry
            buildForTesting = \\"YES\\"
            buildForRunning = \\"YES\\"
            buildForProfiling = \\"NO\\"
            buildForArchiving = \\"NO\\"
            buildForAnalyzing = \\"YES\\">
            <BuildableReference
               BuildableIdentifier = \\"primary\\"
               BlueprintIdentifier = \\"00E356ED1AD99517003FC87E\\"
               BuildableName = \\"exampleTests.xctest\\"
               BlueprintName = \\"exampleTests\\"
               ReferencedContainer = \\"container:example.xcodeproj\\">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = \\"Debug\\"
      selectedDebuggerIdentifier = \\"Xcode.DebuggerFoundation.Debugger.LLDB\\"
      selectedLauncherIdentifier = \\"Xcode.DebuggerFoundation.Launcher.LLDB\\"
      shouldUseLaunchSchemeArgsEnv = \\"YES\\">
      <Testables>
         <TestableReference
            skipped = \\"NO\\">
            <BuildableReference
               BuildableIdentifier = \\"primary\\"
               BlueprintIdentifier = \\"00E356ED1AD99517003FC87E\\"
               BuildableName = \\"exampleTests.xctest\\"
               BlueprintName = \\"exampleTests\\"
               ReferencedContainer = \\"container:example.xcodeproj\\">
            </BuildableReference>
         </TestableReference>
      </Testables>
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = \\"primary\\"
            BlueprintIdentifier = \\"13B07F861A680F5B00A75B9A\\"
            BuildableName = \\"example.app\\"
            BlueprintName = \\"example\\"
            ReferencedContainer = \\"container:example.xcodeproj\\">
         </BuildableReference>
      </MacroExpansion>
      <AdditionalOptions>
      </AdditionalOptions>
   </TestAction>
   <LaunchAction
      buildConfiguration = \\"Debug\\"
      selectedDebuggerIdentifier = \\"Xcode.DebuggerFoundation.Debugger.LLDB\\"
      selectedLauncherIdentifier = \\"Xcode.DebuggerFoundation.Launcher.LLDB\\"
      launchStyle = \\"0\\"
      useCustomWorkingDirectory = \\"NO\\"
      ignoresPersistentStateOnLaunch = \\"NO\\"
      debugDocumentVersioning = \\"YES\\"
      debugServiceExtension = \\"internal\\"
      allowLocationSimulation = \\"YES\\">
      <BuildableProductRunnable
         runnableDebuggingMode = \\"0\\">
         <BuildableReference
            BuildableIdentifier = \\"primary\\"
            BlueprintIdentifier = \\"13B07F861A680F5B00A75B9A\\"
            BuildableName = \\"example.app\\"
            BlueprintName = \\"example\\"
            ReferencedContainer = \\"container:example.xcodeproj\\">
         </BuildableReference>
      </BuildableProductRunnable>
      <AdditionalOptions>
      </AdditionalOptions>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = \\"Release\\"
      shouldUseLaunchSchemeArgsEnv = \\"YES\\"
      savedToolIdentifier = \\"\\"
      useCustomWorkingDirectory = \\"NO\\"
      debugDocumentVersioning = \\"YES\\">
      <BuildableProductRunnable
         runnableDebuggingMode = \\"0\\">
         <BuildableReference
            BuildableIdentifier = \\"primary\\"
            BlueprintIdentifier = \\"13B07F861A680F5B00A75B9A\\"
            BuildableName = \\"example.app\\"
            BlueprintName = \\"example\\"
            ReferencedContainer = \\"container:example.xcodeproj\\">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = \\"Debug\\">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = \\"Release\\"
      revealArchiveInOrganizer = \\"YES\\">
   </ArchiveAction>
</Scheme>
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/ios/example/AppDelegate.h",
    "theContent": "/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#import <React/RCTBridgeDelegate.h>
#import <UIKit/UIKit.h>

@interface AppDelegate : UIResponder <UIApplicationDelegate, RCTBridgeDelegate>

@property (nonatomic, strong) UIWindow *window;

@end
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/ios/example/AppDelegate.m",
    "theContent": "/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#import \\"AppDelegate.h\\"

#import <React/RCTBridge.h>
#import <React/RCTBundleURLProvider.h>
#import <React/RCTRootView.h>

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];
  RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge
                                                   moduleName:@\\"example\\"
                                            initialProperties:nil];

  rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];

  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
  UIViewController *rootViewController = [UIViewController new];
  rootViewController.view = rootView;
  self.window.rootViewController = rootViewController;
  [self.window makeKeyAndVisible];
  return YES;
}

- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge
{
#if DEBUG
  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\\"index\\" fallbackResource:nil];
#else
  return [[NSBundle mainBundle] URLForResource:@\\"main\\" withExtension:@\\"jsbundle\\"];
#endif
}

@end
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/ios/example/Base.lproj/LaunchScreen.xib",
    "theContent": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"no\\"?>
<document type=\\"com.apple.InterfaceBuilder3.CocoaTouch.XIB\\" version=\\"3.0\\" toolsVersion=\\"7702\\" systemVersion=\\"14D136\\" targetRuntime=\\"iOS.CocoaTouch\\" propertyAccessControl=\\"none\\" useAutolayout=\\"YES\\" launchScreen=\\"YES\\" useTraitCollections=\\"YES\\">
    <dependencies>
        <deployment identifier=\\"iOS\\"/>
        <plugIn identifier=\\"com.apple.InterfaceBuilder.IBCocoaTouchPlugin\\" version=\\"7701\\"/>
        <capability name=\\"Constraints with non-1.0 multipliers\\" minToolsVersion=\\"5.1\\"/>
    </dependencies>
    <objects>
        <placeholder placeholderIdentifier=\\"IBFilesOwner\\" id=\\"-1\\" userLabel=\\"File's Owner\\"/>
        <placeholder placeholderIdentifier=\\"IBFirstResponder\\" id=\\"-2\\" customClass=\\"UIResponder\\"/>
        <view contentMode=\\"scaleToFill\\" id=\\"iN0-l3-epB\\">
            <rect key=\\"frame\\" x=\\"0.0\\" y=\\"0.0\\" width=\\"480\\" height=\\"480\\"/>
            <autoresizingMask key=\\"autoresizingMask\\" widthSizable=\\"YES\\" heightSizable=\\"YES\\"/>
            <subviews>
                <label opaque=\\"NO\\" clipsSubviews=\\"YES\\" userInteractionEnabled=\\"NO\\" contentMode=\\"left\\" horizontalHuggingPriority=\\"251\\" verticalHuggingPriority=\\"251\\" text=\\"Powered by React Native\\" textAlignment=\\"center\\" lineBreakMode=\\"tailTruncation\\" baselineAdjustment=\\"alignBaselines\\" minimumFontSize=\\"9\\" translatesAutoresizingMaskIntoConstraints=\\"NO\\" id=\\"8ie-xW-0ye\\">
                    <rect key=\\"frame\\" x=\\"20\\" y=\\"439\\" width=\\"441\\" height=\\"21\\"/>
                    <fontDescription key=\\"fontDescription\\" type=\\"system\\" pointSize=\\"17\\"/>
                    <color key=\\"textColor\\" cocoaTouchSystemColor=\\"darkTextColor\\"/>
                    <nil key=\\"highlightedColor\\"/>
                </label>
                <label opaque=\\"NO\\" clipsSubviews=\\"YES\\" userInteractionEnabled=\\"NO\\" contentMode=\\"left\\" horizontalHuggingPriority=\\"251\\" verticalHuggingPriority=\\"251\\" text=\\"example\\" textAlignment=\\"center\\" lineBreakMode=\\"middleTruncation\\" baselineAdjustment=\\"alignBaselines\\" minimumFontSize=\\"18\\" translatesAutoresizingMaskIntoConstraints=\\"NO\\" id=\\"kId-c2-rCX\\">
                    <rect key=\\"frame\\" x=\\"20\\" y=\\"140\\" width=\\"441\\" height=\\"43\\"/>
                    <fontDescription key=\\"fontDescription\\" type=\\"boldSystem\\" pointSize=\\"36\\"/>
                    <color key=\\"textColor\\" cocoaTouchSystemColor=\\"darkTextColor\\"/>
                    <nil key=\\"highlightedColor\\"/>
                </label>
            </subviews>
            <color key=\\"backgroundColor\\" white=\\"1\\" alpha=\\"1\\" colorSpace=\\"custom\\" customColorSpace=\\"calibratedWhite\\"/>
            <constraints>
                <constraint firstItem=\\"kId-c2-rCX\\" firstAttribute=\\"centerY\\" secondItem=\\"iN0-l3-epB\\" secondAttribute=\\"bottom\\" multiplier=\\"1/3\\" constant=\\"1\\" id=\\"5cJ-9S-tgC\\"/>
                <constraint firstAttribute=\\"centerX\\" secondItem=\\"kId-c2-rCX\\" secondAttribute=\\"centerX\\" id=\\"Koa-jz-hwk\\"/>
                <constraint firstAttribute=\\"bottom\\" secondItem=\\"8ie-xW-0ye\\" secondAttribute=\\"bottom\\" constant=\\"20\\" id=\\"Kzo-t9-V3l\\"/>
                <constraint firstItem=\\"8ie-xW-0ye\\" firstAttribute=\\"leading\\" secondItem=\\"iN0-l3-epB\\" secondAttribute=\\"leading\\" constant=\\"20\\" symbolic=\\"YES\\" id=\\"MfP-vx-nX0\\"/>
                <constraint firstAttribute=\\"centerX\\" secondItem=\\"8ie-xW-0ye\\" secondAttribute=\\"centerX\\" id=\\"ZEH-qu-HZ9\\"/>
                <constraint firstItem=\\"kId-c2-rCX\\" firstAttribute=\\"leading\\" secondItem=\\"iN0-l3-epB\\" secondAttribute=\\"leading\\" constant=\\"20\\" symbolic=\\"YES\\" id=\\"fvb-Df-36g\\"/>
            </constraints>
            <nil key=\\"simulatedStatusBarMetrics\\"/>
            <freeformSimulatedSizeMetrics key=\\"simulatedDestinationMetrics\\"/>
            <point key=\\"canvasLocation\\" x=\\"548\\" y=\\"455\\"/>
        </view>
    </objects>
</document>
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/ios/example/Images.xcassets/AppIcon.appiconset/Contents.json",
    "theContent": "{
  \\"images\\" : [
    {
      \\"idiom\\" : \\"iphone\\",
      \\"size\\" : \\"29x29\\",
      \\"scale\\" : \\"2x\\"
    },
    {
      \\"idiom\\" : \\"iphone\\",
      \\"size\\" : \\"29x29\\",
      \\"scale\\" : \\"3x\\"
    },
    {
      \\"idiom\\" : \\"iphone\\",
      \\"size\\" : \\"40x40\\",
      \\"scale\\" : \\"2x\\"
    },
    {
      \\"idiom\\" : \\"iphone\\",
      \\"size\\" : \\"40x40\\",
      \\"scale\\" : \\"3x\\"
    },
    {
      \\"idiom\\" : \\"iphone\\",
      \\"size\\" : \\"60x60\\",
      \\"scale\\" : \\"2x\\"
    },
    {
      \\"idiom\\" : \\"iphone\\",
      \\"size\\" : \\"60x60\\",
      \\"scale\\" : \\"3x\\"
    }
  ],
  \\"info\\" : {
    \\"version\\" : 1,
    \\"author\\" : \\"xcode\\"
  }
}",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/ios/example/Images.xcassets/Contents.json",
    "theContent": "{
  \\"info\\" : {
    \\"version\\" : 1,
    \\"author\\" : \\"xcode\\"
  }
}
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/ios/example/Info.plist",
    "theContent": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<!DOCTYPE plist PUBLIC \\"-//Apple//DTD PLIST 1.0//EN\\" \\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\">
<plist version=\\"1.0\\">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>en</string>
	<key>CFBundleDisplayName</key>
	<string>example</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIdentifier</key>
	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>$(PRODUCT_NAME)</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>1.0</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleVersion</key>
	<string>1</string>
	<key>LSRequiresIPhoneOS</key>
	<true/>
	<key>NSLocationWhenInUseUsageDescription</key>
	<string></string>
	<key>UILaunchStoryboardName</key>
	<string>LaunchScreen</string>
	<key>UIRequiredDeviceCapabilities</key>
	<array>
		<string>armv7</string>
	</array>
	<key>UISupportedInterfaceOrientations</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>UIViewControllerBasedStatusBarAppearance</key>
	<false/>
	<key>NSLocationWhenInUseUsageDescription</key>
	<string></string>
	<key>NSAppTransportSecurity</key>
	<!--See http://ste.vn/2015/06/10/configuring-app-transport-security-ios-9-osx-10-11/ -->
	<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
		<key>NSExceptionDomains</key>
		<dict>
			<key>localhost</key>
			<dict>
				<key>NSExceptionAllowsInsecureHTTPLoads</key>
				<true/>
			</dict>
		</dict>
	</dict>
</dict>
</plist>
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/ios/example/main.m",
    "theContent": "/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#import <UIKit/UIKit.h>

#import \\"AppDelegate.h\\"

int main(int argc, char * argv[]) {
  @autoreleasepool {
    return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));
  }
}
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/ios/exampleTests/Info.plist",
    "theContent": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<!DOCTYPE plist PUBLIC \\"-//Apple//DTD PLIST 1.0//EN\\" \\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\">
<plist version=\\"1.0\\">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>en</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIdentifier</key>
	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>$(PRODUCT_NAME)</string>
	<key>CFBundlePackageType</key>
	<string>BNDL</string>
	<key>CFBundleShortVersionString</key>
	<string>1.0</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleVersion</key>
	<string>1</string>
</dict>
</plist>
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/ios/exampleTests/exampleTests.m",
    "theContent": "/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#import <UIKit/UIKit.h>
#import <XCTest/XCTest.h>

#import <React/RCTLog.h>
#import <React/RCTRootView.h>

#define TIMEOUT_SECONDS 600
#define TEXT_TO_LOOK_FOR @\\"Welcome to React Native!\\"

@interface exampleTests : XCTestCase

@end

@implementation exampleTests

- (BOOL)findSubviewInView:(UIView *)view matching:(BOOL(^)(UIView *view))test
{
  if (test(view)) {
    return YES;
  }
  for (UIView *subview in [view subviews]) {
    if ([self findSubviewInView:subview matching:test]) {
      return YES;
    }
  }
  return NO;
}

- (void)testRendersWelcomeScreen
{
  UIViewController *vc = [[[RCTSharedApplication() delegate] window] rootViewController];
  NSDate *date = [NSDate dateWithTimeIntervalSinceNow:TIMEOUT_SECONDS];
  BOOL foundElement = NO;

  __block NSString *redboxError = nil;
  RCTSetLogFunction(^(RCTLogLevel level, RCTLogSource source, NSString *fileName, NSNumber *lineNumber, NSString *message) {
    if (level >= RCTLogLevelError) {
      redboxError = message;
    }
  });

  while ([date timeIntervalSinceNow] > 0 && !foundElement && !redboxError) {
    [[NSRunLoop mainRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate dateWithTimeIntervalSinceNow:0.1]];
    [[NSRunLoop mainRunLoop] runMode:NSRunLoopCommonModes beforeDate:[NSDate dateWithTimeIntervalSinceNow:0.1]];

    foundElement = [self findSubviewInView:vc.view matching:^BOOL(UIView *view) {
      if ([view.accessibilityLabel isEqualToString:TEXT_TO_LOOK_FOR]) {
        return YES;
      }
      return NO;
    }];
  }

  RCTSetLogFunction(RCTDefaultLogFunction);

  XCTAssertNil(redboxError, @\\"RedBox error: %@\\", redboxError);
  XCTAssertTrue(foundElement, @\\"Couldn't find element with text '%@' in %d seconds\\", TEXT_TO_LOOK_FOR, TIMEOUT_SECONDS);
}


@end
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/metro.config.js",
    "theContent": "/**
 * Metro configuration for React Native
 * https://github.com/facebook/react-native
 *
 * @format
 */

module.exports = {
  transformer: {
    getTransformOptions: async () => ({
      transform: {
        experimentalImportSupport: false,
        inlineRequires: false,
      },
    }),
  },
};
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/example/package.json",
    "theContent": "{
  \\"name\\": \\"example\\",
  \\"version\\": \\"0.0.1\\",
  \\"private\\": true,
  \\"scripts\\": {
    \\"start\\": \\"node node_modules/react-native/local-cli/cli.js start\\",
    \\"test\\": \\"jest\\",
    \\"postinstall\\": \\"node ../scripts/examples_postinstall.js\\"
  },
  \\"dependencies\\": {
    \\"react\\": \\"16.8.3\\",
    \\"react-native\\": \\"0.59.10\\",
    \\"react-native-integration-test-package-with-example\\": \\"file:../\\"
  },
  \\"devDependencies\\": {
    \\"@babel/core\\": \\"^7.6.0\\",
    \\"@babel/runtime\\": \\"^7.6.0\\",
    \\"babel-jest\\": \\"^24.9.0\\",
    \\"jest\\": \\"^24.9.0\\",
    \\"metro-react-native-babel-preset\\": \\"^0.56.0\\",
    \\"react-test-renderer\\": \\"16.8.3\\"
  },
  \\"jest\\": {
    \\"preset\\": \\"react-native\\"
  }
}
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/index.js",
    "theContent": "import { NativeModules } from 'react-native';

const { IntegrationTestPackageWithExample } = NativeModules;

export default IntegrationTestPackageWithExample;
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/package.json",
    "theContent": "{
  \\"name\\": \\"react-native-integration-test-package-with-example\\",
  \\"title\\": \\"React Native Integration Test Package With Example\\",
  \\"version\\": \\"1.0.0\\",
  \\"description\\": \\"TODO\\",
  \\"main\\": \\"index.js\\",
  \\"scripts\\": {
    \\"test\\": \\"echo \\\\\\"Error: no test specified\\\\\\" && exit 1\\"
  },
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"git+https://github.com/github_account/react-native-integration-test-package-with-example.git\\",
    \\"baseUrl\\": \\"https://github.com/github_account/react-native-integration-test-package-with-example\\"
  },
  \\"keywords\\": [
    \\"react-native\\"
  ],
  \\"author\\": {
    \\"name\\": \\"Your Name\\",
    \\"email\\": \\"yourname@email.com\\"
  },
  \\"license\\": \\"MIT\\",
  \\"licenseFilename\\": \\"LICENSE\\",
  \\"readmeFilename\\": \\"README.md\\",
  \\"peerDependencies\\": {
    \\"react\\": \\"^16.8.1\\",
    \\"react-native\\": \\">=0.59.0-rc.0 <1.0.x\\"
  },
  \\"devDependencies\\": {
    \\"react\\": \\"^16.8.3\\",
    \\"react-native\\": \\"^0.59.10\\"
  }
}
",
  },
  Object {
    "name": "react-native-integration-test-package-with-example/scripts/examples_postinstall.js",
    "theContent": "#!/usr/bin/env node

  /*
   * Using libraries within examples and linking them within packages.json like:
   * \\"react-native-library-name\\": \\"file:../\\"
   * will cause problems with the metro bundler if the example will run via
   * \`react-native run-[ios|android]\`. This will result in an error as the metro
   * bundler will find multiple versions for the same module while resolving it.
   * The reason for that is that if the library is installed it also copies in the
   * example folder itself as well as the node_modules folder of the library
   * although their are defined in .npmignore and should be ignored in theory.
   *
   * This postinstall script removes the node_modules folder as well as all
   * entries from the libraries .npmignore file within the examples node_modules
   * folder after the library was installed. This should resolve the metro
   * bundler issue mentioned above.
   *
   * It is expected this scripts lives in the libraries root folder within a
   * scripts folder. As first parameter the relative path to the libraries
   * folder within the example's node_modules folder may be provided.
   * This script will determine the path from this project's package.json file
   * if no such relative path is provided.
   * An example's package.json entry could look like:
   * \\"postinstall\\": \\"node ../scripts/examples_postinstall.js node_modules/react-native-library-name/\\"
   */

  'use strict';

  const fs = require('fs');
  const path = require('path');

  /// Delete all files and directories for the given path
  const removeFileDirectoryRecursively = fileDirPath => {
    // Remove file
    if (!fs.lstatSync(fileDirPath).isDirectory()) {
      fs.unlinkSync(fileDirPath);
      return;
    }

    // Go down the directory an remove each file / directory recursively
    fs.readdirSync(fileDirPath).forEach(entry => {
      const entryPath = path.join(fileDirPath, entry);
      removeFileDirectoryRecursively(entryPath);
    });
    fs.rmdirSync(fileDirPath);
  };

  /// Remove example/node_modules/react-native-library-name/node_modules directory
  const removeLibraryNodeModulesPath = (libraryNodeModulesPath) => {
    const nodeModulesPath = path.resolve(libraryNodeModulesPath, 'node_modules')

    if (!fs.existsSync(nodeModulesPath)) {
      console.log(\`No node_modules path found at \${nodeModulesPath}. Skipping delete.\`)
      return;
    }

    console.log(\`Deleting: \${nodeModulesPath}\`)
    try {
      removeFileDirectoryRecursively(nodeModulesPath);
      console.log(\`Successfully deleted: \${nodeModulesPath}\`)
    } catch (err) {
      console.log(\`Error deleting \${nodeModulesPath}: \${err.message}\`);
    }
  };

  /// Remove all entries from the .npmignore within  example/node_modules/react-native-library-name/
  const removeLibraryNpmIgnorePaths = (npmIgnorePath, libraryNodeModulesPath) => {
    if (!fs.existsSync(npmIgnorePath)) {
      console.log(\`No .npmignore path found at \${npmIgnorePath}. Skipping deleting content.\`);
      return;
    }

    fs.readFileSync(npmIgnorePath, 'utf8').split(/\\\\r?\\\\n/).forEach(entry => {
      if (entry.length === 0) {
        return
      }

      const npmIgnoreLibraryNodeModulesEntryPath = path.resolve(libraryNodeModulesPath, entry);
      if (!fs.existsSync(npmIgnoreLibraryNodeModulesEntryPath)) {
        return;
      }

      console.log(\`Deleting: \${npmIgnoreLibraryNodeModulesEntryPath}\`)
      try {
        removeFileDirectoryRecursively(npmIgnoreLibraryNodeModulesEntryPath);
        console.log(\`Successfully deleted: \${npmIgnoreLibraryNodeModulesEntryPath}\`)
      } catch (err) {
        console.log(\`Error deleting \${npmIgnoreLibraryNodeModulesEntryPath}: \${err.message}\`);
      }
    });
  };

  // Main start sweeping process
  (() => {
    // Read out dir of example project
    const exampleDir = process.cwd();

    console.log(\`Starting postinstall cleanup for \${exampleDir}\`);

    // Resolve the React Native library's path within the example's node_modules directory
    const libraryNodeModulesPath = process.argv.length > 2
      ? path.resolve(exampleDir, process.argv[2])
      : path.resolve(exampleDir, 'node_modules', require('../package.json').name);

    console.log(\`Removing unwanted artifacts for \${libraryNodeModulesPath}\`);

    removeLibraryNodeModulesPath(libraryNodeModulesPath);

    const npmIgnorePath = path.resolve(__dirname, '../.npmignore');
    removeLibraryNpmIgnorePaths(npmIgnorePath, libraryNodeModulesPath);
  })();
",
  },
]
`;
